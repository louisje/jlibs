private int line, col, offset;
public int getLineNumber(){ return line; }
public int getColumnNumber(){ return col; }
public int getCharacterOffset(){ return offset; }

private boolean skipLF;
private void consumed(char ch){
    offset++;
    if(skipLF && ch=='\n')
        skipLF = false;
    else{
        skipLF = false;
        switch(ch){
            case '\r':
                skipLF = true;
            case '\n':
                line++;
                col = 0;
                break;
            default:
                col++;
        }
    }
    if(!bufferStack.isEmpty())
        buffer.append(ch);
}

private LookAheadBuffer lookAheadBuffer = new LookAheadBuffer();
private static class LookAheadBuffer{
    private StringBuilder buffer = new StringBuilder();
    private java.util.BitSet eofs = new java.util.BitSet();

    public int length(){
        return buffer.length();
    }

    public void append(char ch, boolean eof){
        eofs.set(buffer.length(), eof);
        buffer.append(ch);
    }

    public char charAt(int i){
        return buffer.charAt(i);
    }

    public boolean isEOF(int i){
        return eofs.get(i);
    }

    public void clear(){
        buffer.setLength(0);
        eofs.clear();
    }
}

public void consume(char ch) throws java.text.ParseException{
    try{
        _consume(ch);
    }finally{
        if(lookAheadBuffer.length()==0)
            consumed(ch);
    }
}
