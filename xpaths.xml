<xpaths>
    <testcase xmlns:xs="http://www.w3.org/2001/XMLSchema"
              xmlns:abc="http://www.w3schools.com"
              >
        <file>xmlFiles/note.xml</file>

        <xpath>true()</xpath>
        <xpath>false()</xpath>
        <xpath>boolean(/xs:schema/@targetNamespace)</xpath>
        <xpath>boolean(/xs:schema/@targetNamespace1)</xpath>
        <xpath type="number">1+2*5 div 2 mod 3</xpath>
        <xpath type="number">(1+2)*5</xpath>
        <xpath>normalize-space('  santhosh  kumar   ')</xpath>
        <xpath>string-length(normalize-space('  santhosh  kumar   '))</xpath>
        <xpath>string-length('  santhosh  kumar   ')</xpath>
        <xpath>/xs:schema/descendant-or-self::*[1]</xpath>
        <xpath>/xs:schema/descendant-or-self::*[3]</xpath>
        <xpath>/xs:schema/descendant-or-self::*[4]/@namespace</xpath>
        <xpath>/descendant::xs:element[2]</xpath>
        <xpath>//xs:element[2]</xpath>
        <xpath>//xs:element[position()=2]</xpath>
        <xpath>/xs:schema/@targetNamespace</xpath>
        <xpath>/xs:schema/xs:complexType</xpath>
        <xpath>/xs:schema/xs:element[xs:complexType/@name]/@name</xpath>
        <xpath>/xs:schema/xs:element[xs:complexType]/@name</xpath>
        <xpath>/xs:schema/xs:element/@name</xpath>
        <xpath>/xs:schema/xs:complexType/@name</xpath>
        <xpath>/xs:schema/*/@name</xpath>
        <xpath>/xs:schema/xs:*/@name</xpath>
        <xpath>xs:schema//xs:element/@name</xpath>
        <xpath>/xs:schema/descendant-or-self::xs:element/@name</xpath>
        <xpath>/xs:schema/descendant-or-self::xs:schema/@targetNamespace</xpath>
        <xpath>/xs:schema//@name</xpath>
        <xpath>/xs:schema//text()</xpath>
        <xpath>//text()</xpath>
        <xpath>/xs:schema/@*</xpath>
        <xpath>/xs:schema/@abc:*</xpath>
        <xpath>/xs:schema/*/xs:complexType/@name</xpath>
        <xpath>//xs:any[2]/@namespace</xpath>
        <xpath>//@name</xpath>
        <xpath>xs:schema//xs:complexType/@name</xpath>
        <xpath>xs:schema/xs:any/@namespace</xpath>
        <xpath>//xs:sequence/child::xs:any/@namespace</xpath>
        <xpath>name(/*/*/*)</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/simple.xml</file>

        <xpath>string(/)</xpath>
        <xpath>string(/root)</xpath>
        <xpath>string(/root/a)</xpath>
        <xpath>string(/root/c)</xpath>

        <xpath>concat( /root/a, /root/b )</xpath>
        <xpath>concat( /root/b, /root/a )</xpath>

        <!-- test the translate() function -->
        <xpath>translate( '', '', '' )</xpath>
        <xpath>translate( 'abcd', '', '' )</xpath>
        <xpath>translate( 'abcd', 'abcd', 'abcd' )</xpath>
        <xpath>translate( 'abcd', 'dcba', 'dcba' )</xpath>
        <xpath>translate( 'abcd', 'abcd', 'dcba' )</xpath>
        <xpath>translate( 'abcd', 'abcd', 'ab' )</xpath>
        <xpath>translate( 'abcd', 'cdab', 'cd' )</xpath>
        <xpath>translate( 'abcd', 'acbd', 'xy' )</xpath>
        <xpath>translate( 'abcd', 'abcdb', 'abcdb' )</xpath>
        <xpath>translate( 'abcd', 'abcd', 'abcdb' )</xpath>

        <xpath>substring('12345', 1.5, 2.6)</xpath>
        <xpath>substring('12345', 0, 3)</xpath>
        <xpath>substring('12345', 0 div 0, 3)</xpath>
        <xpath>substring('12345', 1, 0 div 0)</xpath>
        <xpath>substring('12345', -42, 1 div 0)</xpath>
        <xpath>substring('12345', -1 div 0, 1 div 0)</xpath>
        <xpath>substring('12345', 3)</xpath>
        <xpath>substring('12345',1,15)</xpath>

        <xpath>normalize-space('    abc    ')</xpath>
        <xpath>normalize-space(' a  b  c  ')</xpath>
        <xpath>normalize-space(' a &#x0d; b &#x0a;  c  ')</xpath>
        <xpath>normalize-space(' ')</xpath>
        <xpath>normalize-space('')</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/positions.xml</file>

        <xpath>/child::node()</xpath>
        <xpath>/child::*</xpath>
        <xpath>/descendant::node()</xpath>
        <xpath>/descendant::*</xpath>
        <xpath>/descendant-or-self::node()</xpath>
        <xpath>/descendant-or-self::*</xpath>
        <xpath>/descendant::E2[2]</xpath>
        <xpath>/descendant::*/E2[2]</xpath>
        <xpath>/descendant::text()[2]</xpath>
        <xpath>/X/E1/E2[2]</xpath>
        <xpath>/Root/E1/E2[E4]/E3/@name</xpath>
    </testcase>

    <testcase xmlns:env="http://mysoap"
              xmlns:dns1="http://default1"
              xmlns:dns2="http://default2"
              xmlns:dns3="http://default3">
        <file>xmlFiles/sample.xml</file>
        <file>xmlFiles/sample1.xml</file>
        <file>xmlFiles/sample2.xml</file>
        <file>xmlFiles/sample3.xml</file>

        <!-- simple queries -->
        <xpath>/root</xpath>
        <xpath>/root/pub</xpath>
        <xpath>/root/pub/book</xpath>
        <xpath>/root/*/book</xpath>
        <xpath>/*/*/book</xpath>
        <xpath>/root/pub/*</xpath>
        <xpath>/root/*/*</xpath>
        <xpath>/*/*/*</xpath>
        <xpath>/*/*</xpath>
        <xpath>/*</xpath>
        <xpath>*</xpath>
        <xpath>/root/*</xpath>
        <xpath>/*/*</xpath>
        <xpath>.</xpath>
        <xpath>./*</xpath>

        <!-- simple queries with closure-->
        <xpath>/root//pub</xpath>
        <xpath>/root/pub//book</xpath>
        <xpath>/root/*//book</xpath>
        <xpath>/*/*//book</xpath>
        <xpath>/root//pub/*</xpath>
        <xpath>/root//*/*</xpath>
        <xpath>/*//*/*</xpath>
        <xpath>//*</xpath>
        <xpath>//*/*</xpath>
        <xpath>/*//*</xpath>
        <xpath>//pub/book</xpath>
        <xpath>//Body</xpath>

        <!-- descendant-or-self, descendant and self axes -->
		<xpath>/root/pub/descendant-or-self::*</xpath>
		<xpath>/root/pub/descendant-or-self::pub</xpath>
		<xpath>//book/pub/descendant-or-self::*</xpath>
		<xpath>//book/pub/descendant-or-self::pub</xpath>
		<xpath>/root/pub/descendant::*</xpath>
		<xpath>/root/pub/descendant::pub</xpath>
		<xpath>//book/pub/descendant::*</xpath>
		<xpath>//book/pub/descendant::pub</xpath>
		<xpath>//book/*/self::*</xpath>
        <xpath>//book/*/self::pub</xpath>
        <xpath>//book/pub/self::pub</xpath>
        
        <!-- node tests -->
        <xpath>/root/pub/book/*</xpath>
        <xpath>/root/pub/book/text()</xpath>
        <xpath>/root/pub/book/@*</xpath>
        <xpath>/root/pub/book/@id</xpath>
        <xpath>//book/*</xpath>
        <xpath>//book/text()</xpath>
        <xpath>//book/@*</xpath>
        <xpath>//@*</xpath>
        <xpath>//@id</xpath>
        <xpath>/root/pub/node()/*</xpath>
        <xpath>//book/node()</xpath>
        <xpath>/root/pub/book/node()</xpath>
        <xpath>/comment()</xpath>
        <xpath>//comment()</xpath>
        <xpath>/root//comment()</xpath>
        <xpath>/processing-instruction()</xpath>
        <xpath>//processing-instruction()</xpath>
        <xpath>/root//processing-instruction()</xpath>
        <xpath>/descendant::*/comment()</xpath>
        <xpath>/descendant-or-self::node()/comment()</xpath>

        <!-- unabbreviated axes -->
        <xpath>/root/pub/book/attribute::*</xpath>
        <xpath>/root/pub/book/attribute::id</xpath>
        <xpath>//book/attribute::*</xpath>
        <xpath>//book/pub/descendant-or-self::*</xpath>
        <xpath>//book[name = 'NameZ']/self::*</xpath>
        <xpath>//book[name = 'NameZ']/child::*</xpath>
        <xpath>//book[self::*//name = 'NameZ']/child::*</xpath>
        <xpath>//book[self::*/@id = '1']</xpath>
        <xpath>//book[self::*/author = 'AuthorA1' or self::*/price > 12]</xpath>
        <xpath>//book[@id=2]/descendant::*</xpath>
        
        <!-- self axis with name -->
        <xpath>//*[self::book/price > 12]</xpath>
        <xpath>//book[self::book/price > 12]</xpath>

        <!-- other tests -->
		<xpath>/root//*</xpath>
		<xpath>/root/pub/descendant-or-self::*</xpath>
        <xpath>//text()</xpath>
        <xpath>/descendant::node()/text()</xpath>
        <xpath>/descendant-or-self::node()/text()</xpath>
        <xpath>/root/descendant-or-self::*/descendant-or-self::*</xpath>
        <xpath>count(/root/descendant-or-self::node())</xpath>

        <!-- namespace prefix -->
        <xpath>/root/XMLFragment2/env:Envelope</xpath>
        <xpath>/root/*/env:*</xpath>
        <xpath>/root//env:Envelope</xpath>
        <xpath>//env:*</xpath>
        <xpath>//dns1:*</xpath>
        <xpath>//dns2:*</xpath>
        <xpath>//dns3:*</xpath>
        <xpath>//chapter</xpath>
        <xpath>//para</xpath>
        <xpath>//*//temp[1]/.</xpath>
        <xpath>//env:Envelope/Body/Order//Item/Price[@symbol="$"]</xpath>

        <!-- position -->
        <xpath>/root/pub/book[ 1 ]</xpath>
        <xpath>//book/price[ 1 ]</xpath>
        <xpath>//book/price[ 2 ]</xpath>
		<xpath>//*/temp[1]/.</xpath>
        <xpath>//*/temp[4]/.</xpath>
        <xpath>//temp[4]/.</xpath>
        <xpath>//book/*[ 2 ]</xpath>
        <xpath>/root/pub[position() = 1]</xpath>
        <xpath>//book/*[ 2 = position() ]</xpath>
        <xpath>//book/price[ position() = 2 ]</xpath>
        <xpath>//book/price[ 2 = position() ]</xpath>
        <xpath>//env:Envelope/Body[2]/Order//Item[2]/Price[@symbol="$"]</xpath>
        <xpath>//env:Envelope/Body[2]/Order//*/Item[2]/Price[@symbol="$"]</xpath>
        <xpath>//book/price[ position() &lt;= 2 ]</xpath>
        <xpath>//book/price[ 2 &lt;= position() ]</xpath>

        <!-- nested paths -->
        <xpath>//Price[@symbol]</xpath>
        <xpath>//temp[text() = '2' or text() = 1]</xpath>
        <xpath>//Price[text() = '2' or text() = '100']</xpath>
        <xpath>//Item[(Price = 200) or Price = 2]</xpath>
        <xpath>/root/pub/book[price[ 10 = . ]]</xpath>
        <xpath>/root/pub/book[price[ . = 10]]</xpath>
        <xpath>/root/pub[book/name and book/author]//book</xpath>
        <xpath>/root/pub[ book/name and book/author ]/book[ pub or name ]</xpath>
        <xpath>/root/pub/book[ price &lt; 100 and name = 'NameA1' ]</xpath>
        <xpath>/root/pub/book[ 100 > price and name = 'NameA1' ]</xpath>
        <xpath>/root/pub/book/price[ . > 8 ]</xpath>

        <!-- other tests -->
        <xpath>/root//self::*</xpath>

        <!-- nested predicates -->
        <xpath>/root/pub[ book[ name ]]/book</xpath>
        <xpath>/root/pub/book[ pub[ book[ name ]]]</xpath>
        <xpath>/root/pub[ book ]/book[ pub[ book[ name ]]]</xpath>
        <xpath>/root/pub[ book[ pub[ book[ name ]]]]/book[ pub[ book[ name ]]]</xpath>
        <xpath>//book[price]</xpath>
        <xpath>/root/pub/book[ price &lt; 100 and pub[ year = 1999 and book[ author = 'AuthorZ' and name ]]]</xpath>
        <xpath>//pub/book[price[@type = "discount"] = 12]</xpath>
        <xpath>//Item[Price[@symbol="$"]=200]</xpath>

        <!-- closure in predicate -->
        <xpath>//pub[.//book//author]</xpath>
        <xpath>/root/pub//*[year]</xpath>
        <xpath>/root/pub//*[.//year]</xpath>
        <xpath>/root/pub/*[.//year]</xpath>
        <xpath>/root/pub//*[descendant-or-self::year]</xpath>
        <xpath>/root[.//pub[year=1999]]</xpath>
        <xpath>/root[.//pub[year>1999]]</xpath>
        <xpath>/root[.//*[year=1999]]</xpath>
        <xpath>/root[.//*[year>1999]]</xpath>
        <xpath>//pub[year=1999]/book[.//author]/name</xpath>
        <xpath>/pub[year>=1999]//book[.//author]/name</xpath>
        <xpath>//pub[year=2002]/book[.//author]/name</xpath>
        <xpath>/pub[year>=2002]//book[.//author]/name</xpath>

        <!-- queries with Or, And & AndOr structures in predicate-->
        <xpath>//book[price and author]</xpath>
        <xpath>//book[price or author]</xpath>
        <xpath>//book[price and author or name]</xpath>
        <xpath>//book[not(price or author)]</xpath>
        <xpath>//book[not(price and author)]</xpath>
        <xpath>//book[not(price and author or name)]</xpath>
        <xpath>/root/pub/book[ @id = '1' and @FirstBook = 'true' ]</xpath>
        <xpath>/root/pub/book[ @id = '2' or @FirstBook = 'true' ]</xpath>
        <xpath>/root[ @purpose = 'test' ]</xpath>

        <!-- count() used at the top level -->
        <xpath>count(/root/pub/book/price)</xpath>
        <xpath>/root[ pub/book/author ]/pub/book/price</xpath>
        <xpath>count(/root[ pub/book/author ]/pub/book/price)</xpath>
        <xpath>count(/root[ pub/book/author ]/pub[ book/author ]/book/price)</xpath>
        <xpath>count(/root/pub/book[ author ]/price)</xpath>
        <xpath>count(/root/pub[ book/author ]/book[ author ]/price)</xpath>
        <xpath>/root/pub[ book/author ]/book[ author ]/price</xpath>
        <xpath>count(/root[ pub/book/author ]/pub[ book/author ]/book[ author ]/price)</xpath>
        <xpath>/root[ pub/book/author ]/pub[ book/author ]/book[ price ]/price</xpath>
        <xpath>count(/root[ pub/book/author ]/pub[ book/author ]/book[ price ]/price)</xpath>
        <xpath>count(/descendant::node())</xpath>
        <xpath>count(/nonexistingelement)</xpath>

        <!-- string() function -->
        <xpath>string(//book)</xpath>
        <xpath>string(//book[2])</xpath>
        <xpath>string(//book/@*)</xpath>
        <xpath>string(/)</xpath>
        <xpath>string(//book/text())</xpath>
        <xpath>string(/nonexistingelement)</xpath>
        <xpath>string(//book[@testAttr])</xpath>
        <xpath>string(//book[testElem])</xpath>
        <xpath>string(//book[@testAttr]/price)</xpath>
        <xpath>string(//book[testElem]/price)</xpath>

        <!-- sum() function -->
        <xpath>sum(/root/pub/book/price)</xpath>
        <xpath>sum(/root[ pub/book/author ]/pub/book/price)</xpath>
        <xpath>sum(/root[ pub/book/author ]/pub[ book/author ]/book/price)</xpath>
        <xpath>sum(/root/pub/book[ author ]/price)</xpath>
        <xpath>sum(/root/pub[ book/author ]/book[ author ]/price)</xpath>
        <xpath>sum(/root[ pub/book/author ]/pub[ book/author ]/book[ author ]/price)</xpath>
        <xpath>/root[ pub/book/author ]/pub[ book/author ]/book[ price ]/price</xpath>
        <xpath>sum(/root[ pub/book/author ]/pub[ book/author ]/book[ price ]/price)</xpath>
        <xpath>sum(//Price)</xpath>
        <xpath>sum(//book[@testAttr]/price)</xpath>
        <xpath>sum(//book[testElem]/price)</xpath>

        <!-- count() function -->
        <xpath>/root[count(xxx) = 0]</xpath>
        <xpath>/root//pub[count(book) > 0]</xpath>
        <xpath>/root//pub[count(book) > 2]</xpath>
        <xpath>/root//pub[count(book[ price > 10]) > 1]</xpath>
        <xpath>/root//pub[count(book[ price > 12]) > 1]</xpath>
        <xpath>//pub[count(book[count(*) > 4]) > 1]</xpath>
        <xpath>//pub[count(book[count(price) > 0]) > 0]</xpath>
        <xpath>//pub[count(book[count(name) > 0]) > 0]</xpath>
        <xpath>//pub[count(book[count(price) > 100 ]) = 0]</xpath>
        
        <!-- not() function -->
        <xpath>/root[not(xxx)]</xpath>
        <xpath>/root[not(pub)]</xpath>
        <xpath>/root/pub//book[not(price and author)]</xpath>
        <xpath>/root/pub//book[not(price and author)]</xpath>
        <xpath>/root[not(pub) or pub/book]/@purpose</xpath>
        <xpath>/root[pub/book or not(pub)]/@purpose</xpath>
        <xpath>/root[not(xxx) and pub/book]/@purpose</xpath>
        <xpath>/root[not(xxx) or yyy]/@purpose</xpath>
        <xpath>/root[yyy or not(xxx)]/@purpose</xpath>
        <xpath>/root[pub/book and not(xxx)]/@purpose</xpath>
        <xpath>/root[not(xxx) and not(yyy)]/@purpose</xpath>
        <xpath>/root[not(pub) and yyy or pub/book]/@purpose</xpath>
        <xpath>/root[not(xxx) and pub or yyy]/@purpose</xpath>
        <xpath>/root[count(pub) > 0]/pub</xpath>
        <xpath>/root/pub[count(.) > 0]/book</xpath>
        <xpath>/root/pub[count(book[price > 10]) > 0]</xpath>
        <xpath>/root/pub[count(book/price[ . > 10 ]) > 0]</xpath>
        <xpath>/root/pub[count(book) > 0]</xpath>
        <xpath>/root[count(pub[book]/book) > 0]/pub</xpath>
        <xpath>/root[count(pub/book[price]/price) > 3]</xpath>
        <xpath>/root[not(count(xxx) != 0)]/@purpose</xpath>
        <xpath>//pub[count(book[ not(count(price) > 0)] ) > 0]</xpath>

        <!-- multiple closures with elimination of duplicates from output -->
        <xpath>//pub[year=2002]//book//name</xpath>        
        <xpath>//pub[year=2002]//book[author]//name</xpath>
        <xpath>/root//pub[year=2002]//book[price&lt;11]/author</xpath>
        <xpath>//pub[year > 1998]//book[author]//name/text()</xpath>
        <xpath>//pub[year &lt;= 2004]//book[author]//name/text()</xpath>

        <!-- output buffering -->
        <xpath>/root/pub[year = 2002]/book/name</xpath>
        <xpath>/root/pub[year != 2002]/book[author]/name</xpath>
        <xpath>/root/pub[year=2002]/book[price&lt;11]/author</xpath>

        <!-- output buffering with closure -->
        <xpath>//pub[year=2002]/book/name</xpath>
        <xpath>//pub[year!=2002]/book[author]/name</xpath>
        <xpath>/root//pub[year=2002]/book[price&lt;11]/author</xpath>
        <xpath>//pub[year > 1998]/book[author]/author</xpath>
        <xpath>//pub[year > 1998]/book[author]/name</xpath>

        <!-- multiple closures and multiple closure in predicate -->
        <xpath>//pub[.//book//author]</xpath>
        <xpath>//pub[year=1999]//book[.//author]//name</xpath>
        <xpath>//pub[year>=1999]//book[.//author]//name</xpath>
        <xpath>//pub[year=2002]//book[.//author]//name</xpath>
        <xpath>//pub[year>=2002]//book[.//author]//name</xpath>
        
        <!-- namespace functions -->
        <xpath>/root/XMLFragment2/env:Envelope[local-name() = 'Envelope']</xpath>
        <xpath>/root/*/env:Envelope[local-name() = 'Envelope']</xpath>
        <xpath>/root/*/*[local-name()="Envelope" and namespace-uri()='http://mysoap']</xpath>
        <xpath>/root//env:Envelope[local-name() = 'Envelope']</xpath>
        <xpath>//*[namespace-uri()="http://mysoap"]</xpath>
        <xpath>//*[local-name()="Envelope" and namespace-uri()='http://mysoap']</xpath>

        <!-- boolean result -->
        <xpath type="boolean">/root[pub]/pub[book]/book/price > 10</xpath>
        <xpath>/root[count( pub/book[author]/price ) > 3]</xpath>

        <!-- sum() function -->
        <xpath>/root[sum(pub[book]/book/price) > 10]/pub</xpath>
        <xpath>/root[sum(pub[book]/book[price]/price) > 10]</xpath>

        <!-- other functions -->
        <xpath>normalize-space( /root )</xpath>
        <xpath>concat( 'First Author: ', /root/pub/book[2]/author[1], ' Second Author: ', /root/pub/book[2]/author[2] )</xpath>
        <xpath>string( //pub[year >= 1999]//author )</xpath>
        <xpath>local-name( //pub[year >= 1999]//book/* )</xpath>
        <xpath>//book[ contains( author, 'Z' )]</xpath>
        <xpath>//book[ starts-with( substring( author, 7 ), 'A' )]</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/numbers.xml</file>

        <xpath>/numbers/set/nr</xpath>
        <xpath>/numbers/set/nr/@value</xpath>
        <xpath>/numbers/set</xpath>
        <xpath>/numbers/set[1]</xpath>
        <xpath>/numbers/set[2]</xpath>

        <xpath type="boolean">/numbers/set/nr = '-3'</xpath>
        <xpath type="boolean">/numbers/set/nr = -3</xpath>
        <xpath type="boolean">/numbers/set/nr = 24</xpath>
        <xpath type="boolean">/numbers/set/nr/@value = '9999'</xpath>
        <xpath type="boolean">/numbers/set/nr/@value = 9999.0</xpath>
        <xpath type="boolean">/numbers/set/nr/@value = 66</xpath>

        <xpath type="boolean">(8 * 2 + 1) = 17</xpath>
        <xpath type="boolean">(1 + 8 * 2) = 17</xpath>
        <xpath type="boolean">(7 - 3 + 1) = 5</xpath>
        <xpath type="boolean">(8 - 4 + 5 - 6) = 3</xpath>
        <xpath type="number">3 - 2 - 1</xpath>
        <xpath type="number">8 div 4 div 2</xpath>
        <xpath type="number">3 mod 7 mod 5</xpath>
        <xpath type="boolean">1 = 2 = 2</xpath>
        <xpath type="boolean">2 != 3 != 1</xpath>
        <xpath type="boolean">3 &gt; 2 &gt; 1</xpath>
        <xpath type="boolean">3 &gt;= 2 &gt;= 2</xpath>
        <xpath type="boolean">1 &lt; 2 &lt; 3</xpath>
        <xpath type="boolean">2 &lt;= 2 &lt;= 3</xpath>

        <xpath>/numbers/set[1]/*[-3 = .]</xpath>
        <xpath type="boolean">54 &lt; /numbers/set[1]/*</xpath>
        <xpath type="boolean">55 &lt;= /numbers/set[1]/*</xpath>
        <xpath type="boolean">69 &lt; /numbers/set[1]/*</xpath>
        <xpath type="boolean">-2 &gt; /numbers/set[1]/*</xpath>
        <xpath type="boolean">-3 &gt;= /numbers/set[1]/*</xpath>
        <xpath type="boolean">-4 &gt;= /numbers/set[1]/*</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/underscore.xml</file>

        <xpath>/root[@a = 1]</xpath>
        <xpath>/root/@a</xpath>
        <xpath>/root/@_a</xpath>
        <xpath>/root/b</xpath>
        <xpath>/root/_b</xpath>
        <xpath>/root[@_a >= 2]</xpath>
        <xpath>/root[number(b) &lt; 2]</xpath>
        <xpath>/root[number(_b) > 1]</xpath>
    </testcase>

    <testcase xmlns:topic="http://www.oreilly.com/topics">
        <file>xmlFiles/contents.xml</file>

        <xpath>//@*</xpath>
        <xpath>/child::node()//@*</xpath>
        <xpath>//@topic:focus</xpath>
        <xpath>/child::node()//@topic:focus</xpath>
        <xpath>/child::node()//@topic:*</xpath>
        <xpath>//@topic:*</xpath>
        <xpath>/text()</xpath>
        <xpath>//text()</xpath>
        <xpath>/descendant-or-self::text()</xpath>
        <xpath>/descendant-or-self::node()/text()</xpath>
        <xpath>/processing-instruction()</xpath>
        <xpath>//processing-instruction()</xpath>
        <xpath>/comment()</xpath>
        <xpath>//comment()</xpath>
        <xpath>/*/comment()</xpath>
        <xpath>/child::node()/comment()</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/pi.xml</file>

        <xpath>//processing-instruction()</xpath>
        <xpath>//processing-instruction('cheese')</xpath>
        <xpath>//processing-instruction('toast')</xpath>
        <xpath>string(//processing-instruction('toast'))</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/evaluate.xml</file>

        <xpath>//jumps/*</xpath>
        <xpath>//jumps/object</xpath>
        <xpath>//jumps/object/dog</xpath>
        <xpath>//jumps/*/dog</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/web.xml</file>

        <xpath>/web-app/servlet/servlet-name</xpath>
        <xpath>/web-app/servlet[1]/servlet-name</xpath>
        <xpath>/web-app/servlet[1]/servlet-name/text()</xpath>
        <xpath>/web-app/servlet[2]/servlet-name</xpath>
        <xpath>/web-app/servlet[2]/servlet-name/text()</xpath>
        <xpath>/web-app/servlet[2][servlet-name]/*</xpath>

        <xpath type="boolean">/web-app/servlet/servlet-name = 'file'</xpath>
        <xpath type="boolean">/web-app/servlet/servlet-name = 'snoop'</xpath>

        <!-- test Axes -->
        <xpath>/*/servlet</xpath>
        <xpath>//servlet</xpath>
        <xpath>/web-app/descendant::servlet</xpath>
        <xpath>/web-app/descendant-or-self::servlet</xpath>
        <xpath>descendant::*</xpath>
        <xpath>/descendant::servlet</xpath>
        <xpath>/descendant-or-self::servlet</xpath>
        <xpath>descendant-or-self::servlet</xpath>
        <xpath>descendant::servlet</xpath>
        <xpath>descendant-or-self::*</xpath>
        <xpath>/*/descendant-or-self::*</xpath>

        <!-- name() function -->
        <xpath>name(/*)</xpath>
        <xpath>name(/*/child::*)</xpath>
        <xpath>name(/node())</xpath>
        <xpath>name(/)</xpath>
        <xpath>name(/.)</xpath>
        <xpath>name(/self::node())</xpath>
        <xpath>name(/child::*)</xpath>
        <xpath>name(/child::node())</xpath>
        <xpath>name(./*)</xpath>
        <xpath>name(.)</xpath>
        <xpath>name()</xpath>
        <xpath>name(/nonexistingelement)</xpath>

        <!-- count() function -->
        <xpath>count(/*/servlet)</xpath>
        <xpath>count(//servlet)</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/fibo.xml</file>

        <xpath>/*/fibonacci[2]</xpath>
        <xpath>/*/fibonacci</xpath>
        <xpath>count(/*/fibonacci)</xpath>
        <xpath>sum(//fibonacci)</xpath>
        <xpath>sum(//fibonacci/@index)</xpath>
        <xpath>count(/*/fibonacci) - 1</xpath>
        <xpath>/*/fibonacci[position() &lt; 10]</xpath>
    </testcase>

    <testcase xmlns:dummy="dummyNamespace"
              xmlns:x="noNamespace">
        <file>xmlFiles/defaultNamespace.xml</file>

        <xpath>/a/b/c</xpath>
        <xpath>/x:a/x:b/x:c</xpath>
        <xpath>/dummy:a/dummy:b/dummy:c</xpath>
        <xpath>/dummy:a/dummy:*/dummy:c</xpath>
        <xpath>/dummy:*/dummy:*/dummy:c</xpath>
        <xpath>/dummy:*/dummy:*/dummy:*</xpath>
        <xpath>/dummy:*//dummy:*</xpath>
        <xpath>//dummy:*</xpath>
    </testcase>

    <testcase xmlns:foo="fooNamespace"
              xmlns:voo="fooNamespace"
			  xmlns:bar="barNamespace"
              xmlns:alias="fooNamespace">
        <file>xmlFiles/namespaces.xml</file>

        <xpath>/*</xpath>
        <xpath>/foo:a</xpath>
        <xpath>/foo:a/b</xpath>
        <xpath>/foo:a/b/c</xpath>
        <xpath>/foo:a/foo:d/foo:e</xpath>
        <xpath>/foo:a/foo:x/foo:y</xpath>
        <xpath>/foo:a/bar:f</xpath>
        <xpath>/voo:a/b/c</xpath>
        <xpath>/voo:a/bar:f</xpath>
        <xpath>/foo:a/alias:x/alias:y</xpath>

        <xpath>/*[namespace-uri()='fooNamespace' and local-name()='a']</xpath>
        <xpath>/*[local-name()='a' and namespace-uri()='fooNamespace']/*[local-name()='x' and namespace-uri()='fooNamespace']</xpath>
        <xpath>/*[local-name()='a' and namespace-uri()='fooNamespace']/*[local-name()='x' and namespace-uri()='fooNamespace']/*[local-name()='y' and namespace-uri()='fooNamespace']</xpath>
        <xpath>/foo:a/*[local-name()='x' and namespace-uri()='fooNamespace' and *[local-name()='y' and namespace-uri()='fooNamespace']]</xpath>
        <xpath>/*[local-name()='a' and namespace-uri()='fooNamespace']/*[local-name()='x' and namespace-uri()='fooNamespace' and ./*[local-name()='y' and namespace-uri()='fooNamespace']]</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/text.xml</file>

        <xpath>/foo/bar/text()</xpath>
        <xpath>string(/foo/bar/text())</xpath>
        <xpath>normalize-space(/foo/bar/text())</xpath>
        <xpath>normalize-space(/foo/bar)</xpath>
        <xpath>string-length(/foo/bar/text())</xpath>
        <xpath>string-length(normalize-space(/foo/bar))</xpath>
        <xpath>/web-app/servlet[1]/servlet-name</xpath>
        <xpath>/web-app/servlet[1]/servlet-name/text()</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/organization.xml</file>

        <xpath>/descendant::node()</xpath>
        <xpath>//child::node()</xpath>
        <xpath>//child::comment()</xpath>
        <xpath>//self::node()/attribute::empdate</xpath>
        
        <!-- unabbreviated axes -->
        <xpath>//@empID</xpath>
        <xpath>//@*</xpath>
        <xpath>/*//self::*</xpath>
        <xpath>//self::*/name</xpath>
        <xpath>//child::president</xpath>
        <xpath>//child::name</xpath>
        <xpath>/descendant::node()</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/moreover.xml</file>

        <xpath>/*</xpath>
        <xpath>/*/article</xpath>
        <xpath>//*</xpath>
        <xpath>//article</xpath>
        <xpath>/*/*[@code]</xpath>
        <xpath>/child::node()</xpath>

        <xpath>/moreovernews/article[@code='13563275']</xpath>
        <xpath>/*/article[@code='13563275']</xpath>
        <xpath>//article[@code='13563275']</xpath>
        <xpath>/child::node()/child::*[@code='13563275']</xpath>
        <xpath>/*/*[@code='13563275']</xpath>
        <xpath>//*[@code='13563275']</xpath>
        <xpath>//*[local-name()='article']</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/id.xml</file>

        <xpath>/foo</xpath>
        <xpath>/foo[@id='foobar']</xpath>
        <xpath>/foo[@id="foobar"]</xpath>
        <xpath>/foo[concat('foo', 'bar')=@id]</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/much_ado.xml</file>

        <xpath>/descendant::ACT</xpath>
        <xpath>descendant::ACT</xpath>
        <xpath>/PLAY/TITLE</xpath>
        <xpath>descendant::ACT</xpath>
        <xpath>descendant::SPEAKER</xpath>
        <xpath>/PLAY/ACT[2]/SCENE[1]/descendant::SPEAKER</xpath>
        <xpath>/PLAY/ACT[2]/SCENE[1]/descendant::SPEAKER</xpath>
        <xpath>/PLAY/ACT[2]/SCENE[1]/descendant::*</xpath>
        <xpath>/PLAY/ACT[2]/SCENE[1]/descendant::SPEAKER</xpath>
        <xpath>/PLAY/ACT/SCENE[1]</xpath>

        <xpath>count(descendant::ACT)</xpath>
        <xpath>count(/PLAY/ACT/SCENE[1])</xpath>
        <xpath type="number">2+2</xpath>

        <xpath type="number">10 + count(descendant::ACT)</xpath>
        <xpath>count(/descendant::*)+1</xpath>
        <xpath>count(descendant::SPEAKER)+1</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/sum.xml</file>

        <xpath>number(//one)</xpath>
        <xpath>sum(//one)</xpath>
        <xpath>number(//two)</xpath>
        <xpath>number(//two)+5</xpath>
        <xpath>sum(//two)</xpath>
        <xpath>sum(//one/text())</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/purchase_order.xml</file>

        <!-- attribute validation of purchaseOrder -->
        <xpath>/purchaseOrder[ not( count( @* ) = 1 )]</xpath>

        <!-- attribute validation of item -->
        <xpath>/purchaseOrder/items/item[ not( count( @* ) = 1 )]</xpath>

        <!-- test for invalid root element -->
        <xpath>/*[ not( self::purchaseOrder )]</xpath>

        <!-- test for invalid attribute of purchaseOrder -->
        <xpath>/purchaseOrder[ not( @orderDate )]</xpath>

        <!-- test for invalid child of purchaseOrder -->
        <xpath>/purchaseOrder/*[ not( self::shipTo or self::billTo or self::comment or self::items )]</xpath>

        <!-- test for invalid child of items -->
        <xpath>/purchaseOrder/items/*[ not( self::item )]</xpath>

        <!-- test for invalid attribute of item -->
        <xpath>/purchaseOrder/items/item[ not( @partNum )]</xpath>

        <!-- test for invalid child sequence of purchaseOrder -->
        <xpath>/purchaseOrder/*[ 1 ][ not( self::shipTo )]</xpath>
        <xpath>/purchaseOrder/*[ 2 ][ not( self::billTo )]</xpath>
        <xpath>/purchaseOrder[ comment ]/*[ 3 ][ not( self::comment )]</xpath>

        <!-- test for invalid child sequence of shipTo -->
        <xpath>/purchaseOrder/shipTo/*[ 1 ][ not( self::name )]</xpath>
        <xpath>/purchaseOrder/shipTo/*[ 2 ][ not( self::street )]</xpath>
        <xpath>/purchaseOrder/shipTo/*[ 3 ][ not( self::city )]</xpath>
        <xpath>/purchaseOrder/shipTo/*[ 4 ][ not( self::state )]</xpath>
        <xpath>/purchaseOrder/shipTo/*[ 5 ][ not( self::zip )]</xpath>

        <!-- test for invalid child of shipTo -->
        <xpath>/purchaseOrder/shipTo/*[ not( self::name or self::street or self::city or self::state or self::zip )]</xpath>

        <!-- test for invalid child of item -->
        <xpath>/purchaseOrder/items/item/*[ not( self::productName or self::quantity or self::USPrice or self::comment or self::shipDate)]</xpath>

        <!-- test for invalid child sequence of item -->
        <xpath>/purchaseOrder/items/item/*[ 1 ][ not( self::productName )]</xpath>
        <xpath>/purchaseOrder/items/item/*[ 2 ][ not( self::quantity )]</xpath>
        <xpath>/purchaseOrder/items/item/*[ 3 ][ not( self::USPrice )]</xpath>
        <xpath>/purchaseOrder/items/item[ comment ]/*[ 5 ][ not( self::shipDate )]</xpath>
        <xpath>/purchaseOrder/items/item[ not( comment )]/*[ 4 ][ not( self::shipDate )]</xpath>
        <xpath>/purchaseOrder/items/item[ comment ]/*[ 4 ][ not( self::comment )]</xpath>

        <!-- test for invalid child sequence of billTo -->
        <xpath>/purchaseOrder/billTo/*[ 1 ][ not( self::name )]</xpath>
        <xpath>/purchaseOrder/billTo/*[ 2 ][ not( self::street )]</xpath>
        <xpath>/purchaseOrder/billTo/*[ 3 ][ not( self::city )]</xpath>
        <xpath>/purchaseOrder/billTo/*[ 4 ][ not( self::state )]</xpath>
        <xpath>/purchaseOrder/billTo/*[ 5 ][ not( self::zip )]</xpath>

        <!-- test for invalid child of billTo -->
        <xpath>/purchaseOrder/billTo/*[ not( self::name or self::street or self::city or self::state or self::zip )]</xpath>

        <!-- test for invalid child sequence of purchaseOrder -->
        <xpath>/purchaseOrder/*[ position() >= 3 ][ not( self::comment or self::items )]</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/roof.xml</file>

        <xpath>//roofing-material[type="shingles" and manufacturer="Nash"]</xpath>
        <xpath>//roofing-material[manufacturer[. = "Nash"] and type[. = "shingles"]]</xpath>
    </testcase>

    <testcase>
        <file>xmlFiles/nitf.xml</file>

        <xpath>/nitf/head/docdata/doc-id[@regsrc='AP' and @id-string='D76UIMO80']</xpath>
        <xpath>/nitf/head/meta[@name='ap-cycle']</xpath>
        <xpath>/nitf/head/meta[@content='AP']</xpath>
        <xpath>/nitf/head/meta[@name and @content]</xpath>
        <xpath>/nitf/head/meta[@name='ap-cycle' and @content='AP']</xpath>
        <xpath>/nitf/head/meta[@name != 'ap-cycle']</xpath>        
    </testcase>

    <testcase>
        <file>xmlFiles/message.xml</file>

        <xpath>/message/body/data/items/item[name/text()='parentinfo']/value</xpath>
    </testcase>
</xpaths>