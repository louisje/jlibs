package jlibs.xml.sax.async;

import java.io.IOException;

/**
 * DON'T EDIT THIS FILE. THIS IS GENERATED BY JLIBS
 *
 * @author Santhosh Kumar T
 */
public final class XMLScanner extends jlibs.nbp.NBParser{

    int STRING_IDS[][] = {
        {}, // dummy one
        {78, 79, 84, 65, 84, 73, 79, 78}, // NOTATION
    };

    public static final int RULE_STR_NOTATION = -1;

    /*-------------------------------------------------[ Matchers ]---------------------------------------------------*/

    private static boolean DIGIT(int ch){
        return ch>='0' && ch<='9';
    }

    private static boolean HEX_DIGIT(int ch){
        return (DIGIT(ch)) || (ch>='a' && ch<='f') || (ch>='A' && ch<='F');
    }

    private static boolean WS(int ch){
        return ch==0x20 || ch==0x9 || ch==0xa || ch==0xd;
    }

    private static boolean ENCODING_START(int ch){
        return (ch>='A' && ch<='Z') || (ch>='a' && ch<='z');
    }

    private static boolean ENCODING_PART(int ch){
        return (ENCODING_START(ch)) || (DIGIT(ch)) || (ch=='.' || ch=='_' || ch=='-');
    }

    private static boolean ELEM_CONTENT_CHAR(int ch){
        return (org.apache.xerces.util.XMLChar.isValid(ch)) && (ch!='<' && ch!='&');
    }

    private static boolean ATTR_Q_CONTENT(int ch){
        return (org.apache.xerces.util.XMLChar.isValid(ch)) && (ch!='<' && ch!='&' && ch!='\'');
    }

    private static boolean ATTR_DQ_CONTENT(int ch){
        return (org.apache.xerces.util.XMLChar.isValid(ch)) && (ch!='<' && ch!='&' && ch!='"');
    }

    private static boolean ENTITY_CONTENT(int ch){
        return (org.apache.xerces.util.XMLChar.isValid(ch)) && (ch!='%' && ch!='&');
    }

    private static boolean ENTITY_Q_CONTENT(int ch){
        return (org.apache.xerces.util.XMLChar.isValid(ch)) && (ch!='%' && ch!='&' && ch!='\'');
    }

    private static boolean ENTITY_DQ_CONTENT(int ch){
        return (org.apache.xerces.util.XMLChar.isValid(ch)) && (ch!='%' && ch!='&' && ch!='"');
    }

    private static boolean PUBID_CHAR_NQ(int ch){
        return (org.apache.xerces.util.XMLChar.isPubid(ch)) && (ch!='\'');
    }

    /*-------------------------------------------------[ Rules ]---------------------------------------------------*/

    public static final int RULE_EQ = 0;
    private boolean eq() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='='){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[=] OR <WS>");
                case 1:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_YES_NO = 1;
    private boolean yes_no() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='y'){
                        buffer.push();
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch=='n'){
                        buffer.push();
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[y] OR [n]");
                case 1:
                    if(ch=='e'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[e]");
                case 2:
                    if(ch=='s'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[s]");
                case 3:
                    handler.standalone(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 4:
                    if(ch=='o'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[o]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_SD_DECL = 2;
    private boolean sd_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='s'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[s]");
                case 1:
                    if(ch=='t'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[t]");
                case 2:
                    if(ch=='a'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[a]");
                case 3:
                    if(ch=='n'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[n]");
                case 4:
                    if(ch=='d'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[d]");
                case 5:
                    if(ch=='a'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[a]");
                case 6:
                    if(ch=='l'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[l]");
                case 7:
                    if(ch=='o'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[o]");
                case 8:
                    if(ch=='n'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[n]");
                case 9:
                    if(ch=='e'){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[e]");
                case 10:
                    if(ch=='='){
                        push(RULE_EQ, 11, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        push(RULE_EQ, 11, 0);
                        consume(ch);
                        curState = 0;
                        return true;
                    }
                    expected(ch, "[=] OR <WS>");
                case 11:
                    if(ch=='\''){
                        curState = 12;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<Q> OR <DQ>");
                case 12:
                    if(ch=='y'){
                        push(RULE_YES_NO, 13, 0);
                        buffer.push();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='n'){
                        push(RULE_YES_NO, 13, 0);
                        buffer.push();
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "[y] OR [n]");
                case 13:
                    if(ch=='\''){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<Q>");
                case 15:
                    if(ch=='y'){
                        push(RULE_YES_NO, 16, 0);
                        buffer.push();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='n'){
                        push(RULE_YES_NO, 16, 0);
                        buffer.push();
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "[y] OR [n]");
                case 16:
                    if(ch=='"'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<DQ>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENC_NAME = 3;
    private boolean enc_name() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ENCODING_START(ch)){
                        buffer.push();
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<ENCODING_START>");
                case 1:
                    if((ch=finishAll_ENCODING_PART(ch))==EOC)
                        return false;
                    handler.encoding(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENC_DECL = 4;
    private boolean enc_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='e'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[e]");
                case 1:
                    if(ch=='n'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[n]");
                case 2:
                    if(ch=='c'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[c]");
                case 3:
                    if(ch=='o'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[o]");
                case 4:
                    if(ch=='d'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[d]");
                case 5:
                    if(ch=='i'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[i]");
                case 6:
                    if(ch=='n'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[n]");
                case 7:
                    if(ch=='g'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[g]");
                case 8:
                    if(ch=='='){
                        push(RULE_EQ, 9, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        push(RULE_EQ, 9, 0);
                        consume(ch);
                        curState = 0;
                        return true;
                    }
                    expected(ch, "[=] OR <WS>");
                case 9:
                    if(ch=='\''){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<Q> OR <DQ>");
                case 10:
                    if(ENCODING_START(ch)){
                        push(RULE_ENC_NAME, 11, 0);
                        buffer.push();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<ENCODING_START>");
                case 11:
                    if(ch=='\''){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<Q>");
                case 13:
                    if(ENCODING_START(ch)){
                        push(RULE_ENC_NAME, 14, 0);
                        buffer.push();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<ENCODING_START>");
                case 14:
                    if(ch=='"'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<DQ>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_VERSION_NUM = 5;
    private boolean version_num() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='1'){
                        buffer.push();
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[1]");
                case 1:
                    if(ch=='.'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\.]");
                case 2:
                    if(DIGIT(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<DIGIT>");
                case 3:
                    if((ch=finishAll_DIGIT(ch))==EOC)
                        return false;
                    handler.version(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_VERSION_INFO = 6;
    private boolean version_info() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='v'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[v]");
                case 1:
                    if(ch=='e'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[e]");
                case 2:
                    if(ch=='r'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[r]");
                case 3:
                    if(ch=='s'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[s]");
                case 4:
                    if(ch=='i'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[i]");
                case 5:
                    if(ch=='o'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[o]");
                case 6:
                    if(ch=='n'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[n]");
                case 7:
                    if(ch=='='){
                        push(RULE_EQ, 8, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        push(RULE_EQ, 8, 0);
                        consume(ch);
                        curState = 0;
                        return true;
                    }
                    expected(ch, "[=] OR <WS>");
                case 8:
                    if(ch=='\''){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        curState = 12;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<Q> OR <DQ>");
                case 9:
                    if(ch=='1'){
                        push(RULE_VERSION_NUM, 10, 0);
                        buffer.push();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[1]");
                case 10:
                    if(ch=='\''){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<Q>");
                case 12:
                    if(ch=='1'){
                        push(RULE_VERSION_NUM, 13, 0);
                        buffer.push();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[1]");
                case 13:
                    if(ch=='"'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<DQ>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_COMMENT = 7;
    private boolean comment() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='-'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\-]");
                case 3:
                    if(ch=='-'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\-]");
                case 4:
                    if(ch=='-'){
                        buffer.push();
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        buffer.push();
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<DASH> OR <CHAR>");
                case 5:
                    if(ch=='-'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<DASH> OR <CHAR>");
                case 6:
                    if(ch=='-'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<DASH> OR <CHAR>");
                case 7:
                    if(ch=='>'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[>]");
                case 8:
                    handler.comment(buffer.pop(0, 3));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_CDATA_END = 8;
    private boolean cdata_end() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch==']'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 0;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<BRACKET_CLOSE> OR <CHAR>");
                case 1:
                    if(ch==']'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 0;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<BRACKET_CLOSE> OR <CHAR>");
                case 2:
                    if((ch=finishAll(ch, ']'))==EOC)
                        return false;
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 0;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<GT> OR <BRACKET_CLOSE> OR <CHAR>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_CDATA = 9;
    private boolean cdata() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='['){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\[]");
                case 3:
                    if(ch=='C'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[C]");
                case 4:
                    if(ch=='D'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 5:
                    if(ch=='A'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 6:
                    if(ch=='T'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 7:
                    if(ch=='A'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 8:
                    if(ch=='['){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\[]");
                case 9:
                    if(ch==']'){
                        buffer.push();
                        push(RULE_CDATA_END, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        buffer.push();
                        push(RULE_CDATA_END, 10, 0);
                        consume(ch);
                        curState = 0;
                        return true;
                    }
                    expected(ch, "<BRACKET_CLOSE> OR <CHAR>");
                case 10:
                    handler.cdata(buffer.pop(0, 3));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NAME = 10;
    private boolean name() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<NAME_START>");
                case 1:
                    if((ch=finishAll_NAME_PART(ch))==EOC)
                        return false;
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_PI_TARGET = 11;
    private boolean pi_target() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='x' || ch=='X'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[xX] OR <NCNAME_START>");
                case 1:
                    if(ch=='m' || ch=='M'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCName(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                case 2:
                    if(ch=='l' || ch=='L'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCName(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                case 3:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCName(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<NCNAME_PART>");
                case 4:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCName(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                case 7:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCName(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_PI = 12;
    private boolean pi() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='?'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[?]");
                case 2:
                    if(ch=='x' || ch=='X'){
                        buffer.push();
                        push(RULE_PI_TARGET, 3, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        buffer.push();
                        push(RULE_PI_TARGET, 3, 0);
                        consume(ch);
                        curState = 7;
                        return true;
                    }
                    expected(ch, "[xX] OR <NCNAME_START>");
                case 3:
                    if(WS(ch)){
                        handler.piTarget(buffer.pop(0, 0));
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    if(ch=='?'){
                        handler.piTarget(buffer.pop(0, 0));
                        handler.piData();
                        curState = 12;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [?]");
                case 5:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='?'){
                        buffer.push();
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        buffer.push();
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [?] OR <CHAR>");
                case 7:
                    if(ch=='?'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[?] OR <CHAR>");
                case 8:
                    if((ch=finishAll(ch, '?'))==EOC)
                        return false;
                    if(ch=='>'){
                        handler.piData(buffer.pop(0, 1));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[>] OR [?] OR <CHAR>");
                case 12:
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[>]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NCNAME = 13;
    private boolean ncname() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<NCNAME_START>");
                case 1:
                    if((ch=finishAll_NCNAME_PART(ch))==EOC)
                        return false;
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_QNAME = 14;
    private boolean qname() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        buffer.push();
                        buffer.push();
                        push(RULE_NCNAME, 2, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NCNAME_START>");
                case 2:
                    if(ch==':'){
                        handler.prefix(buffer.pop(0, 0));
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    buffer.pop(0, 0);
                    handler.qname(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 4:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        push(RULE_NCNAME, 5, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NCNAME_START>");
                case 5:
                    handler.qname(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_REFERENCE = 15;
    private boolean reference() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='&'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\&]");
                case 1:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 3, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='#'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<NAME_START> OR [\\#]");
                case 3:
                    if(ch==';'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[;]");
                case 4:
                    handler.entityReference(buffer.pop(0, 1));
                    curState = -1;
                    return true;
                case 6:
                    if(ch=='x'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    if(DIGIT(ch)){
                        buffer.push();
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[x] OR <DIGIT>");
                case 7:
                    if(HEX_DIGIT(ch)){
                        buffer.push();
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<HEX_DIGIT>");
                case 8:
                    if((ch=finishAll_HEX_DIGIT(ch))==EOC)
                        return false;
                    if(ch==';'){
                        handler.hexCode(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[;] OR <HEX_DIGIT>");
                case 13:
                    if((ch=finishAll_DIGIT(ch))==EOC)
                        return false;
                    if(ch==';'){
                        handler.asciiCode(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[;] OR <DIGIT>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ATTR = 16;
    private boolean attr() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        push(RULE_QNAME, 1, 0);
                        buffer.push();
                        buffer.push();
                        push(RULE_NCNAME, 2, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NCNAME_START>");
                case 1:
                    if(ch=='='){
                        push(RULE_EQ, 2, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        push(RULE_EQ, 2, 0);
                        consume(ch);
                        curState = 0;
                        return true;
                    }
                    expected(ch, "[=] OR <WS>");
                case 2:
                    if(ch=='\''){
                        push(RULE_VALUE, 3, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_VALUE, 3, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    expected(ch, "['] OR [\"]");
                case 3:
                    handler.attributeEnd();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_VALUE = 17;
    private boolean value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='\''){
                        handler.valueStart();
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        handler.valueStart();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "['] OR [\"]");
                case 1:
                    if(ch=='\''){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && ATTR_Q_CONTENT(ch)){
                        push(RULE_Q_VALUE, 1, 0);
                        buffer.push();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    if(ch=='&'){
                        push(RULE_Q_VALUE, 1, 0);
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "['] OR <ATTR_Q_CONTENT> OR [\\&]");
                case 2:
                    handler.valueEnd();
                    curState = -1;
                    return true;
                case 3:
                    if(ch=='"'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && ATTR_DQ_CONTENT(ch)){
                        push(RULE_DQ_VALUE, 3, 0);
                        buffer.push();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    if(ch=='&'){
                        push(RULE_DQ_VALUE, 3, 0);
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[\"] OR <ATTR_DQ_CONTENT> OR [\\&]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_Q_VALUE = 18;
    private boolean q_value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && ATTR_Q_CONTENT(ch)){
                        buffer.push();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='&'){
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<ATTR_Q_CONTENT> OR [\\&]");
                case 3:
                    if(ch!=EOF && ATTR_Q_CONTENT(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    handler.rawValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_DQ_VALUE = 19;
    private boolean dq_value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && ATTR_DQ_CONTENT(ch)){
                        buffer.push();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='&'){
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<ATTR_DQ_CONTENT> OR [\\&]");
                case 3:
                    if(ch!=EOF && ATTR_DQ_CONTENT(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    handler.rawValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ELEM_ATTRS = 20;
    private boolean elem_attrs() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        push(RULE_QNAME, 2, 0);
                        buffer.push();
                        buffer.push();
                        push(RULE_NCNAME, 2, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NCNAME_START>");
                case 2:
                    if(WS(ch)){
                        handler.attributesStart();
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    handler.attributesStart();
                    curState = -1;
                    return true;
                case 4:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        push(RULE_ATTR, 5, 0);
                        push(RULE_QNAME, 1, 0);
                        buffer.push();
                        buffer.push();
                        push(RULE_NCNAME, 2, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    curState = -1;
                    return true;
                case 5:
                    if(WS(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ELEM_CONTENT = 21;
    private boolean elem_content() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch==']'){
                            buffer.push();
                            consume(FROM_LA);
                            curState = 8;
                            continue;
                        }
                        if(ch=='&'){
                            push(RULE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                            buffer.push();
                            consume(FROM_LA);
                            curState = 6;
                            continue;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                                push(RULE_ELEM, -1, 0);
                                push(RULE_ELEM_ATTRS, 1, 0);
                                consume(FROM_LA);
                                push(RULE_QNAME, 2, 0);
                                buffer.push();
                                buffer.push();
                                push(RULE_NCNAME, 2, 0);
                                consume(FROM_LA);
                                curState = 1;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='-'){
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_CDATA, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    expected(ch, "[\\]] OR [\\&] OR <ELEM_CONTENT_CHAR> OR [<]<NCNAME_START> OR [<][?] OR [<][!][\\-] OR [<][!][\\[]");
                case 6:
                    if(ch==']'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    handler.characters(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 8:
                    if(ch==']'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    handler.characters(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 9:
                    if((ch=finishAll(ch, ']'))==EOC)
                        return false;
                    if(ch=='>'){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    handler.characters(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 11:
                    handler.fatalError("Text may not contain a literal ']]>' sequence");
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ELEM = 22;
    private boolean elem() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        push(RULE_ELEM_ATTRS, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='/'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch=='>'){
                        handler.attributesEnd();
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[/] OR [>]");
                case 2:
                    if(ch=='>'){
                        handler.attributesEnd();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[>]");
                case 3:
                    handler.elementEnd();
                    curState = -1;
                    return true;
                case 5:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch==']'){
                            push(RULE_ELEM_CONTENT, 5, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 8;
                            return true;
                        }
                        if(ch=='&'){
                            push(RULE_ELEM_CONTENT, 5, 0);
                            push(RULE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                            push(RULE_ELEM_CONTENT, 5, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 6;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                                push(RULE_ELEM_CONTENT, 5, 0);
                                push(RULE_ELEM, -1, 0);
                                push(RULE_ELEM_ATTRS, 1, 0);
                                consume(FROM_LA);
                                push(RULE_QNAME, 2, 0);
                                buffer.push();
                                buffer.push();
                                push(RULE_NCNAME, 2, 0);
                                consume(FROM_LA);
                                curState = 1;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_ELEM_CONTENT, 5, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='/'){
                                consume(FROM_LA);
                                handler.endingElem();
                                consume(FROM_LA);
                                stack[free-3] = 7; // @DYNAMIC_STRING_MATCH
                                curState = stack[free-1];
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='-'){
                                    push(RULE_ELEM_CONTENT, 5, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_ELEM_CONTENT, 5, 0);
                                    push(RULE_CDATA, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    expected(ch, "[\\]] OR [\\&] OR <ELEM_CONTENT_CHAR> OR [<]<NCNAME_START> OR [<][?] OR [<][/] OR [<][!][\\-] OR [<][!][\\[]");
                case 6:
                    if(ch=='/'){
                        handler.endingElem();
                        consume(ch);
                        stack[free-3] = 7; // @DYNAMIC_STRING_MATCH
                        curState = stack[free-1];
                        return true;
                    }
                    expected(ch, "[/]");
                case 7:
                    if(WS(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch=='>'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [>]");
                case 8:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='>'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [>]");
                case 9:
                    handler.elementEnd();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_XDECL = 23;
    private boolean xdecl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='?'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[?]");
                case 2:
                    if(ch=='x'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[x]");
                case 3:
                    if(ch=='m'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[m]");
                case 4:
                    if(ch=='l'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[l]");
                case 5:
                    if(WS(ch)){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 6:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='v'){
                        push(RULE_VERSION_INFO, 7, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [v]");
                case 7:
                    if(WS(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch=='?'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [?]");
                case 8:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='e'){
                        push(RULE_ENC_DECL, 9, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='?'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(ch=='s'){
                        push(RULE_SD_DECL, 12, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [e] OR [?] OR [s]");
                case 9:
                    if(WS(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch=='?'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [?]");
                case 10:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='s'){
                        push(RULE_SD_DECL, 12, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='?'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [s] OR [?]");
                case 12:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='?'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [?]");
                case 14:
                    if(ch=='>'){
                        handler.xdeclEnd();
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[>]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_MISC = 24;
    private boolean misc() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            consume(FROM_LA);
                            curState = 1;
                            continue;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='!'){
                                push(RULE_COMMENT, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    expected(ch, "<WS> OR [<][!] OR [<][?]");
                case 1:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_SYTEM_LITERAL = 25;
    private boolean sytem_literal() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='\''){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<Q> OR <DQ>");
                case 1:
                    if(ch!=EOF && (ch!='\'')){
                        buffer.push();
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch=='\''){
                        buffer.push();
                        handler.systemID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[^'] OR <Q>");
                case 2:
                    if((ch=finishAll_OtherThan(ch, '\''))==EOC)
                        return false;
                    if(ch=='\''){
                        handler.systemID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[^'] OR <Q>");
                case 5:
                    if(ch!=EOF && (ch!='"')){
                        buffer.push();
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        buffer.push();
                        handler.systemID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[^\"] OR <DQ>");
                case 6:
                    if((ch=finishAll_OtherThan(ch, '"'))==EOC)
                        return false;
                    if(ch=='"'){
                        handler.systemID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[^\"] OR <DQ>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_PUBID_LITERAL = 26;
    private boolean pubid_literal() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='"'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch=='\''){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<DQ> OR <Q>");
                case 1:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isPubid(ch)){
                        buffer.push();
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        buffer.push();
                        handler.publicID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<PUBID_CHAR> OR <DQ>");
                case 2:
                    if((ch=finishAll_PUBID_CHAR(ch))==EOC)
                        return false;
                    if(ch=='"'){
                        handler.publicID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<PUBID_CHAR> OR <DQ>");
                case 5:
                    if(ch!=EOF && PUBID_CHAR_NQ(ch)){
                        buffer.push();
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    if(ch=='\''){
                        buffer.push();
                        handler.publicID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<PUBID_CHAR_NQ> OR <Q>");
                case 6:
                    if((ch=finishAll_PUBID_CHAR_NQ(ch))==EOC)
                        return false;
                    if(ch=='\''){
                        handler.publicID(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<PUBID_CHAR_NQ> OR <Q>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_SYSTEM_ID = 27;
    private boolean system_id() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='S'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[S]");
                case 1:
                    if(ch=='Y'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[Y]");
                case 2:
                    if(ch=='S'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[S]");
                case 3:
                    if(ch=='T'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 4:
                    if(ch=='E'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 5:
                    if(ch=='M'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[M]");
                case 6:
                    if(WS(ch)){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 7:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='\''){
                        push(RULE_SYTEM_LITERAL, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_SYTEM_LITERAL, -1, 0);
                        consume(ch);
                        curState = 5;
                        return true;
                    }
                    expected(ch, "<Q> OR <DQ> OR <WS>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_PUBLIC_ID = 28;
    private boolean public_id() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='P'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[P]");
                case 1:
                    if(ch=='U'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[U]");
                case 2:
                    if(ch=='B'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[B]");
                case 3:
                    if(ch=='L'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[L]");
                case 4:
                    if(ch=='I'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 5:
                    if(ch=='C'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[C]");
                case 6:
                    if(WS(ch)){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 7:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='"'){
                        push(RULE_PUBID_LITERAL, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='\''){
                        push(RULE_PUBID_LITERAL, -1, 0);
                        consume(ch);
                        curState = 5;
                        return true;
                    }
                    expected(ch, "<DQ> OR <Q> OR <WS>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NOTATION_DECL = 29;
    private boolean notation_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='N'){
                        push(RULE_STR_NOTATION, 3, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[N]");
                case 3:
                    if(WS(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 4:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        buffer.push();
                        push(RULE_NCNAME, 6, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NCNAME_START>");
                case 6:
                    if(WS(ch)){
                        handler.notationName(buffer.pop(0, 0));
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 7:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='P'){
                        push(RULE_PUBLIC_ID, 8, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='S'){
                        push(RULE_SYSTEM_ID, 11, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[P] OR <WS> OR [S]");
                case 8:
                    if(WS(ch)){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='>'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [>]");
                case 9:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='\''){
                        push(RULE_SYTEM_LITERAL, 11, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_SYTEM_LITERAL, 11, 0);
                        consume(ch);
                        curState = 5;
                        return true;
                    }
                    if(ch=='>'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR <Q> OR <DQ> OR [>]");
                case 11:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='>'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [>]");
                case 13:
                    handler.notationEnd();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_EXTERNAL_ID = 30;
    private boolean external_id() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='P'){
                        push(RULE_PUBLIC_ID, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='S'){
                        push(RULE_SYSTEM_ID, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[P] OR [S]");
                case 1:
                    if(WS(ch)){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 2:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='\''){
                        push(RULE_SYTEM_LITERAL, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_SYTEM_LITERAL, -1, 0);
                        consume(ch);
                        curState = 5;
                        return true;
                    }
                    expected(ch, "<WS> OR <Q> OR <DQ>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_PE_REFERENCE = 31;
    private boolean pe_reference() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='%'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[%]");
                case 1:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 2, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START>");
                case 2:
                    if(ch==';'){
                        handler.peReference(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[;]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NDATA_DECL = 32;
    private boolean ndata_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='N'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 1:
                    if(ch=='D'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 2:
                    if(ch=='A'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 3:
                    if(ch=='T'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 4:
                    if(ch=='A'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 5:
                    if(WS(ch)){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 6:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 8, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START>");
                case 8:
                    handler.notationReference(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_PE_DEF = 33;
    private boolean pe_def() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='P'){
                        push(RULE_EXTERNAL_ID, -1, 0);
                        push(RULE_PUBLIC_ID, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='S'){
                        push(RULE_EXTERNAL_ID, -1, 0);
                        push(RULE_SYSTEM_ID, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='\''){
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 2;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "[P] OR [S] OR <Q> OR <DQ>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENTITY_VALUE = 34;
    private boolean entity_value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='\''){
                        handler.valueStart();
                        handler.entityValue();
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch=='"'){
                        handler.valueStart();
                        handler.entityValue();
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<Q> OR <DQ>");
                case 2:
                    if(ch=='\''){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && ENTITY_Q_CONTENT(ch)){
                        push(RULE_Q_ENTITY_VALUE, 2, 0);
                        buffer.push();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    if(ch=='&'){
                        push(RULE_Q_ENTITY_VALUE, 2, 0);
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_Q_ENTITY_VALUE, 2, 0);
                        push(RULE_PE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<Q> OR <ENTITY_Q_CONTENT> OR [\\&] OR [%]");
                case 3:
                    handler.valueEnd();
                    curState = -1;
                    return true;
                case 4:
                    if(ch=='"'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && ENTITY_DQ_CONTENT(ch)){
                        push(RULE_DQ_ENTITY_VALUE, 4, 0);
                        buffer.push();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    if(ch=='&'){
                        push(RULE_DQ_ENTITY_VALUE, 4, 0);
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_DQ_ENTITY_VALUE, 4, 0);
                        push(RULE_PE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<DQ> OR <ENTITY_DQ_CONTENT> OR [\\&] OR [%]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_Q_ENTITY_VALUE = 35;
    private boolean q_entity_value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && ENTITY_Q_CONTENT(ch)){
                        buffer.push();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='&'){
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<ENTITY_Q_CONTENT> OR [\\&] OR [%]");
                case 3:
                    if(ch!=EOF && ENTITY_Q_CONTENT(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    handler.rawValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_DQ_ENTITY_VALUE = 36;
    private boolean dq_entity_value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && ENTITY_DQ_CONTENT(ch)){
                        buffer.push();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='&'){
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<ENTITY_DQ_CONTENT> OR [\\&] OR [%]");
                case 3:
                    if(ch!=EOF && ENTITY_DQ_CONTENT(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    handler.rawValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENTITY_DECL = 37;
    private boolean entity_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='E'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 3:
                    if(ch=='N'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 4:
                    if(ch=='T'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 5:
                    if(ch=='I'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 6:
                    if(ch=='T'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 7:
                    if(ch=='Y'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[Y]");
                case 8:
                    if(WS(ch)){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 9:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='%'){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        buffer.push();
                        push(RULE_NCNAME, 18, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [%] OR <NCNAME_START>");
                case 10:
                    if(WS(ch)){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 11:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                        buffer.push();
                        push(RULE_NCNAME, 13, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NCNAME_START>");
                case 13:
                    if(WS(ch)){
                        handler.paramEntityName(buffer.pop(0, 0));
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 14:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='P'){
                        push(RULE_PE_DEF, 15, 0);
                        push(RULE_EXTERNAL_ID, -1, 0);
                        push(RULE_PUBLIC_ID, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='S'){
                        push(RULE_PE_DEF, 15, 0);
                        push(RULE_EXTERNAL_ID, -1, 0);
                        push(RULE_SYSTEM_ID, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='\''){
                        push(RULE_PE_DEF, 15, 0);
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 2;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_PE_DEF, 15, 0);
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "[P] OR [S] OR <Q> OR <DQ> OR <WS>");
                case 15:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='>'){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[>] OR <WS>");
                case 16:
                    handler.paramEntityEnd();
                    curState = -1;
                    return true;
                case 18:
                    if(WS(ch)){
                        handler.entityName(buffer.pop(0, 0));
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 19:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='P'){
                        push(RULE_ENTITY_DEF, 20, 0);
                        push(RULE_EXTERNAL_ID, 1, 0);
                        push(RULE_PUBLIC_ID, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='S'){
                        push(RULE_ENTITY_DEF, 20, 0);
                        push(RULE_EXTERNAL_ID, 1, 0);
                        push(RULE_SYSTEM_ID, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='\''){
                        push(RULE_ENTITY_DEF, 20, 0);
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 2;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_ENTITY_DEF, 20, 0);
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "[P] OR [S] OR <Q> OR <DQ> OR <WS>");
                case 20:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='>'){
                        curState = 21;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [>]");
                case 21:
                    handler.entityEnd();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENTITY_DEF = 38;
    private boolean entity_def() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='P'){
                        push(RULE_EXTERNAL_ID, 1, 0);
                        push(RULE_PUBLIC_ID, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='S'){
                        push(RULE_EXTERNAL_ID, 1, 0);
                        push(RULE_SYSTEM_ID, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='\''){
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 2;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_ENTITY_VALUE, -1, 0);
                        handler.valueStart();
                        handler.entityValue();
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "[P] OR [S] OR <Q> OR <DQ>");
                case 1:
                    if(WS(ch)){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                case 2:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='N'){
                        push(RULE_NDATA_DECL, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_STRING_TYPE = 39;
    private boolean string_type() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='C'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[C]");
                case 1:
                    if(ch=='D'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 2:
                    if(ch=='A'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 3:
                    if(ch=='T'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 4:
                    if(ch=='A'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 5:
                    handler.cdataAttribute();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_TOKENIZED_TYPE = 40;
    private boolean tokenized_type() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='E'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    if(ch=='N'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(ch=='I'){
                        curState = 23;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E] OR [N] OR [I]");
                case 5:
                    if(ch=='N'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 6:
                    if(ch=='T'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 7:
                    if(ch=='I'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 8:
                    if(ch=='T'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 9:
                    if(ch=='Y'){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch=='I'){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[Y] OR [I]");
                case 10:
                    handler.entityAttribute();
                    curState = -1;
                    return true;
                case 11:
                    if(ch=='E'){
                        curState = 12;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 12:
                    if(ch=='S'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[S]");
                case 13:
                    handler.entitiesAttribute();
                    curState = -1;
                    return true;
                case 14:
                    if(ch=='M'){
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[M]");
                case 15:
                    if(ch=='T'){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 16:
                    if(ch=='O'){
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[O]");
                case 17:
                    if(ch=='K'){
                        curState = 18;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[K]");
                case 18:
                    if(ch=='E'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 19:
                    if(ch=='N'){
                        curState = 20;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 20:
                    if(ch=='S'){
                        curState = 22;
                        consume(ch);
                        continue;
                    }
                    handler.nmtokenAttribute();
                    curState = -1;
                    return true;
                case 22:
                    handler.nmtokensAttribute();
                    curState = -1;
                    return true;
                case 23:
                    if(ch=='D'){
                        curState = 24;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 24:
                    if(ch=='R'){
                        curState = 25;
                        consume(ch);
                        continue;
                    }
                    handler.idAttribute();
                    curState = -1;
                    return true;
                case 25:
                    if(ch=='E'){
                        curState = 26;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 26:
                    if(ch=='F'){
                        curState = 27;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[F]");
                case 27:
                    if(ch=='S'){
                        curState = 28;
                        consume(ch);
                        continue;
                    }
                    handler.idRefAttribute();
                    curState = -1;
                    return true;
                case 28:
                    handler.idRefsAttribute();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NMTOKEN = 41;
    private boolean nmtoken() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isName(ch)){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<NAME_PART>");
                case 1:
                    if((ch=finishAll_NAME_PART(ch))==EOC)
                        return false;
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NMTOKENS = 42;
    private boolean nmtokens() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isName(ch)){
                        push(RULE_NMTOKEN, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_PART>");
                case 1:
                    if(ch==0x20){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[#x20;]");
                case 2:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isName(ch)){
                        push(RULE_NMTOKEN, 3, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_PART>");
                case 3:
                    if(ch==0x20){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NAMES = 43;
    private boolean names() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START>");
                case 1:
                    if(ch==0x20){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[#x20;]");
                case 2:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME, 3, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START>");
                case 3:
                    if(ch==0x20){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENUMERATION = 44;
    private boolean enumeration() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='('){
                        handler.enumerationAttribute();
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[(]");
                case 1:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isName(ch)){
                        buffer.push();
                        push(RULE_NMTOKEN, 3, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_PART>");
                case 3:
                    if(WS(ch)){
                        handler.attributeEnumValue(buffer.pop(0, 0));
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    if(ch=='|'){
                        handler.attributeEnumValue(buffer.pop(0, 0));
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        handler.attributeEnumValue(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                case 4:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='|'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                case 7:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isName(ch)){
                        buffer.push();
                        push(RULE_NMTOKEN, 9, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_PART>");
                case 9:
                    if(WS(ch)){
                        handler.attributeEnumValue(buffer.pop(0, 0));
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch=='|'){
                        handler.attributeEnumValue(buffer.pop(0, 0));
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        handler.attributeEnumValue(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                case 10:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='|'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_MIXED = 45;
    private boolean mixed() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='('){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[(]");
                case 1:
                    if(WS(ch)){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch=='#'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [\\#] OR [%]");
                case 2:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='#'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [\\#] OR [%]");
                case 3:
                    if(ch=='#'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\#]");
                case 4:
                    if(ch=='P'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[P]");
                case 5:
                    if(ch=='C'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[C]");
                case 6:
                    if(ch=='D'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 7:
                    if(ch=='A'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 8:
                    if(ch=='T'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 9:
                    if(ch=='A'){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 10:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='|'){
                            consume(FROM_LA);
                            curState = 13;
                            continue;
                        }
                        if(WS(ch)){
                            consume(FROM_LA);
                            curState = 11;
                            continue;
                        }
                        if(ch=='%'){
                            push(RULE_PE_REFERENCE, 10, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)==')'){
                            if(ch=='*'){
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = -1;
                                return true;
                            }
                            consume(FROM_LA);
                            curState = -1;
                            return true;
                        }
                    }
                    expected(ch, "[|] OR <WS> OR [%] OR [)][*] OR [)]<EOF>");
                case 11:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='|'){
                            consume(FROM_LA);
                            curState = 13;
                            continue;
                        }
                        if(WS(ch)){
                            consume(FROM_LA);
                            curState = 11;
                            continue;
                        }
                        if(ch=='%'){
                            push(RULE_PE_REFERENCE, 10, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)==')'){
                            if(ch=='*'){
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = -1;
                                return true;
                            }
                            consume(FROM_LA);
                            curState = -1;
                            return true;
                        }
                    }
                    expected(ch, "[|] OR <WS> OR [%] OR [)][*] OR [)]<EOF>");
                case 13:
                    if(WS(ch)){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 13, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START> OR [%]");
                case 14:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 13, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START> OR [%]");
                case 15:
                    if(WS(ch)){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    if(ch=='|'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)] OR [%]");
                case 16:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='|'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)] OR [%]");
                case 19:
                    if(ch=='*'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[*]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NOTATION_TYPE = 46;
    private boolean notation_type() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='N'){
                        handler.notationAttribute();
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 1:
                    if(ch=='O'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[O]");
                case 2:
                    if(ch=='T'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 3:
                    if(ch=='A'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 4:
                    if(ch=='T'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 5:
                    if(ch=='I'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 6:
                    if(ch=='O'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[O]");
                case 7:
                    if(ch=='N'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 8:
                    if(WS(ch)){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 9:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='('){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [(]");
                case 10:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 12, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START>");
                case 12:
                    if(WS(ch)){
                        handler.attributeNotationValue(buffer.pop(0, 0));
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch=='|'){
                        handler.attributeNotationValue(buffer.pop(0, 0));
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        handler.attributeNotationValue(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                case 13:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='|'){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                case 16:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 18, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START>");
                case 18:
                    if(WS(ch)){
                        handler.attributeNotationValue(buffer.pop(0, 0));
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    if(ch=='|'){
                        handler.attributeNotationValue(buffer.pop(0, 0));
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        handler.attributeNotationValue(buffer.pop(0, 0));
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                case 19:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='|'){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "<WS> OR [|] OR [)]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENUMERATED_TYPE = 47;
    private boolean enumerated_type() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='N'){
                        push(RULE_NOTATION_TYPE, -1, 0);
                        handler.notationAttribute();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='('){
                        push(RULE_ENUMERATION, -1, 0);
                        handler.enumerationAttribute();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[N] OR [(]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ATT_TYPE = 48;
    private boolean att_type() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='('){
                            push(RULE_ENUMERATED_TYPE, -1, 0);
                            push(RULE_ENUMERATION, -1, 0);
                            handler.enumerationAttribute();
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch=='E'){
                            push(RULE_TOKENIZED_TYPE, -1, 0);
                            consume(FROM_LA);
                            curState = 5;
                            return true;
                        }
                        if(ch=='I'){
                            push(RULE_TOKENIZED_TYPE, -1, 0);
                            consume(FROM_LA);
                            curState = 23;
                            return true;
                        }
                        if(ch=='C'){
                            push(RULE_STRING_TYPE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='N'){
                            if(ch=='O'){
                                push(RULE_ENUMERATED_TYPE, -1, 0);
                                push(RULE_NOTATION_TYPE, -1, 0);
                                handler.notationAttribute();
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='M'){
                                push(RULE_TOKENIZED_TYPE, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 15;
                                return true;
                            }
                        }
                    }
                    expected(ch, "[(] OR [E] OR [I] OR [C] OR [N][O] OR [N][M]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_DEFAULT_DECL = 49;
    private boolean default_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='\''){
                        push(RULE_VALUE, 1, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_VALUE, 1, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    if(ch=='#'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "['] OR [\"] OR [\\#]");
                case 1:
                    handler.attributeDefaultValue();
                    curState = -1;
                    return true;
                case 2:
                    if(ch=='R'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='I'){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    if(ch=='F'){
                        curState = 18;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[R] OR [I] OR [F]");
                case 3:
                    if(ch=='E'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 4:
                    if(ch=='Q'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[Q]");
                case 5:
                    if(ch=='U'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[U]");
                case 6:
                    if(ch=='I'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 7:
                    if(ch=='R'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[R]");
                case 8:
                    if(ch=='E'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 9:
                    if(ch=='D'){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 10:
                    handler.attributeRequired();
                    curState = -1;
                    return true;
                case 11:
                    if(ch=='M'){
                        curState = 12;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[M]");
                case 12:
                    if(ch=='P'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[P]");
                case 13:
                    if(ch=='L'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[L]");
                case 14:
                    if(ch=='I'){
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 15:
                    if(ch=='E'){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 16:
                    if(ch=='D'){
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 17:
                    handler.attributeImplied();
                    curState = -1;
                    return true;
                case 18:
                    if(ch=='I'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 19:
                    if(ch=='X'){
                        curState = 20;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[X]");
                case 20:
                    if(ch=='E'){
                        curState = 21;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 21:
                    if(ch=='D'){
                        curState = 22;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 22:
                    if(WS(ch)){
                        curState = 23;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 23:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='\''){
                        push(RULE_VALUE, 24, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_VALUE, 24, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    expected(ch, "<WS> OR ['] OR [\"]");
                case 24:
                    handler.attributeFixedValue();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ATT_DEF = 50;
    private boolean att_def() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START>");
                case 1:
                    if(WS(ch)){
                        handler.dtdAttribute(buffer.pop(0, 0));
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 2:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            consume(FROM_LA);
                            curState = 2;
                            continue;
                        }
                        if(ch=='('){
                            push(RULE_ATT_TYPE, 3, 0);
                            push(RULE_ENUMERATED_TYPE, -1, 0);
                            push(RULE_ENUMERATION, -1, 0);
                            handler.enumerationAttribute();
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch=='E'){
                            push(RULE_ATT_TYPE, 3, 0);
                            push(RULE_TOKENIZED_TYPE, -1, 0);
                            consume(FROM_LA);
                            curState = 5;
                            return true;
                        }
                        if(ch=='I'){
                            push(RULE_ATT_TYPE, 3, 0);
                            push(RULE_TOKENIZED_TYPE, -1, 0);
                            consume(FROM_LA);
                            curState = 23;
                            return true;
                        }
                        if(ch=='C'){
                            push(RULE_ATT_TYPE, 3, 0);
                            push(RULE_STRING_TYPE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='N'){
                            if(ch=='O'){
                                push(RULE_ATT_TYPE, 3, 0);
                                push(RULE_ENUMERATED_TYPE, -1, 0);
                                push(RULE_NOTATION_TYPE, -1, 0);
                                handler.notationAttribute();
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='M'){
                                push(RULE_ATT_TYPE, 3, 0);
                                push(RULE_TOKENIZED_TYPE, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 15;
                                return true;
                            }
                        }
                    }
                    expected(ch, "<WS> OR [(] OR [E] OR [I] OR [C] OR [N][O] OR [N][M]");
                case 3:
                    if(WS(ch)){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 3, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [%]");
                case 4:
                    if(WS(ch)){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    if(ch=='\''){
                        push(RULE_DEFAULT_DECL, -1, 0);
                        push(RULE_VALUE, 1, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_DEFAULT_DECL, -1, 0);
                        push(RULE_VALUE, 1, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    if(ch=='#'){
                        push(RULE_DEFAULT_DECL, -1, 0);
                        consume(ch);
                        curState = 2;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 4, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR ['] OR [\"] OR [\\#] OR [%]");
                case 5:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='\''){
                        push(RULE_DEFAULT_DECL, -1, 0);
                        push(RULE_VALUE, 1, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='"'){
                        push(RULE_DEFAULT_DECL, -1, 0);
                        push(RULE_VALUE, 1, 0);
                        handler.valueStart();
                        consume(ch);
                        curState = 3;
                        return true;
                    }
                    if(ch=='#'){
                        push(RULE_DEFAULT_DECL, -1, 0);
                        consume(ch);
                        curState = 2;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 4, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR ['] OR [\"] OR [\\#] OR [%]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ATT_LIST_DECL = 51;
    private boolean att_list_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='A'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[A]");
                case 3:
                    if(ch=='T'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 4:
                    if(ch=='T'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 5:
                    if(ch=='L'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[L]");
                case 6:
                    if(ch=='I'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 7:
                    if(ch=='S'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[S]");
                case 8:
                    if(ch=='T'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 9:
                    if(WS(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 9, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [%]");
                case 10:
                    if(WS(ch)){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 13, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START> OR [%]");
                case 11:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 13, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START> OR [%]");
                case 13:
                    if(WS(ch)){
                        handler.dtdAttributesStart(buffer.pop(0, 0));
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        handler.dtdAttributesStart(buffer.pop(0, 0));
                        push(RULE_PE_REFERENCE, 14, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='>'){
                        handler.dtdAttributesStart(buffer.pop(0, 0));
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [%] OR [>]");
                case 14:
                    if(WS(ch)){
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 14, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [%]");
                case 15:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_ATT_DEF, 17, 0);
                        buffer.push();
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    if(ch=='>'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START> OR <WS> OR [>] OR [%]");
                case 16:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_ATT_DEF, 17, 0);
                        buffer.push();
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='>'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START> OR <WS> OR [>] OR [%]");
                case 17:
                    if(ch=='>'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    if(WS(ch)){
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 14, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[>] OR <WS> OR [%]");
                case 19:
                    handler.dtdAttributesEnd();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_CHILDREN = 52;
    private boolean children() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='('){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[(]");
                case 1:
                    if(WS(ch)){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch=='('){
                        push(RULE_CHILDREN, 4, 0);
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME_CARDINALITY, 4, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [(] OR <NAME_START> OR [%]");
                case 2:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='('){
                        push(RULE_CHILDREN, 4, 0);
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME_CARDINALITY, 4, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [(] OR <NAME_START> OR [%]");
                case 3:
                    if(ch=='('){
                        push(RULE_CHILDREN, 4, 0);
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME_CARDINALITY, 4, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[(] OR <NAME_START>");
                case 4:
                    if(ch=='|'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch==','){
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(WS(ch)){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 4, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[|] OR [,] OR [)] OR <WS> OR [%]");
                case 5:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='|'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch==','){
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 4, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[|] OR [,] OR [)] OR <WS> OR [%]");
                case 8:
                    if(ch=='('){
                        push(RULE_CHILDREN, 10, 0);
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(WS(ch)){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME_CARDINALITY, 10, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 8, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[(] OR <WS> OR <NAME_START> OR [%]");
                case 9:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='('){
                        push(RULE_CHILDREN, 10, 0);
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME_CARDINALITY, 10, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 8, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[(] OR <WS> OR <NAME_START> OR [%]");
                case 10:
                    if(ch=='|'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(WS(ch)){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[|] OR [)] OR <WS> OR [%]");
                case 11:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='|'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[|] OR [)] OR <WS> OR [%]");
                case 14:
                    if(ch=='?' || ch=='+' || ch=='*'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    curState = -1;
                    return true;
                case 17:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME_CARDINALITY, 19, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        curState = 18;
                        consume(ch);
                        continue;
                    }
                    if(ch=='('){
                        push(RULE_CHILDREN, 19, 0);
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 17, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START> OR <WS> OR [(] OR [%]");
                case 18:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME_CARDINALITY, 19, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='('){
                        push(RULE_CHILDREN, 19, 0);
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 17, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START> OR <WS> OR [(] OR [%]");
                case 19:
                    if(ch==','){
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(WS(ch)){
                        curState = 20;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 19, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[,] OR [)] OR <WS> OR [%]");
                case 20:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch==','){
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    if(ch==')'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 19, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[,] OR [)] OR <WS> OR [%]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_NAME_CARDINALITY = 53;
    private boolean name_cardinality() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<NAME_START>");
                case 1:
                    if(ch=='?' || ch=='*' || ch=='+'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_DECL_SEP = 54;
    private boolean decl_sep() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='%'){
                        handler.peReferenceOutsideMarkup();
                        push(RULE_PE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[%] OR <WS>");
                case 3:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_MARKUP_DECL = 55;
    private boolean markup_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    expected(ch, "[<][?] OR [<][!][A] OR [<][!][N] OR [<][!][\\-] OR [<][!][E][L] OR [<][!][E][N]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ELEMENT_DECL = 56;
    private boolean element_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='E'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 3:
                    if(ch=='L'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[L]");
                case 4:
                    if(ch=='E'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 5:
                    if(ch=='M'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[M]");
                case 6:
                    if(ch=='E'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 7:
                    if(ch=='N'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 8:
                    if(ch=='T'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 9:
                    if(WS(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 9, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [%]");
                case 10:
                    if(WS(ch)){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 13, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START> OR [%]");
                case 11:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 13, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START> OR [%]");
                case 13:
                    if(WS(ch)){
                        handler.dtdElement(buffer.pop(0, 0));
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        handler.dtdElement(buffer.pop(0, 0));
                        push(RULE_PE_REFERENCE, 14, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [%]");
                case 14:
                    if(WS(ch)){
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 14, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [%]");
                case 15:
                    if(ch=='('){
                        curState = 18;
                        consume(ch);
                        continue;
                    }
                    if(ch=='E'){
                        curState = 27;
                        consume(ch);
                        continue;
                    }
                    if(ch=='A'){
                        curState = 31;
                        consume(ch);
                        continue;
                    }
                    if(WS(ch)){
                        curState = 16;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[(] OR [E] OR [A] OR <WS> OR [%]");
                case 16:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='('){
                        curState = 18;
                        consume(ch);
                        continue;
                    }
                    if(ch=='E'){
                        curState = 27;
                        consume(ch);
                        continue;
                    }
                    if(ch=='A'){
                        curState = 31;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 15, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[(] OR [E] OR [A] OR <WS> OR [%]");
                case 18:
                    if(WS(ch)){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 18, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='('){
                        handler.notMixed();
                        push(RULE_CHILDREN, 21, 3);
                        push(RULE_CHILDREN, 4, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        handler.notMixed();
                        push(RULE_CHILDREN, 21, 3);
                        push(RULE_NAME_CARDINALITY, 4, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='#'){
                        push(RULE_MIXED, 21, 3);
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "<WS> OR [%] OR [(] OR <NAME_START> OR [\\#]");
                case 19:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 18, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='('){
                        handler.notMixed();
                        push(RULE_CHILDREN, 21, 3);
                        push(RULE_CHILDREN, 4, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        handler.notMixed();
                        push(RULE_CHILDREN, 21, 3);
                        push(RULE_NAME_CARDINALITY, 4, 0);
                        push(RULE_NAME, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='#'){
                        push(RULE_MIXED, 21, 3);
                        consume(ch);
                        curState = 4;
                        return true;
                    }
                    expected(ch, "<WS> OR [%] OR [(] OR <NAME_START> OR [\\#]");
                case 21:
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    if(WS(ch)){
                        curState = 25;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 24, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[>] OR <WS> OR [%]");
                case 24:
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    if(WS(ch)){
                        curState = 25;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 24, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[>] OR <WS> OR [%]");
                case 25:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 24, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[>] OR <WS> OR [%]");
                case 27:
                    if(ch=='M'){
                        handler.notMixed();
                        curState = 28;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[M]");
                case 28:
                    if(ch=='P'){
                        curState = 29;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[P]");
                case 29:
                    if(ch=='T'){
                        curState = 30;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 30:
                    if(ch=='Y'){
                        curState = 24;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[Y]");
                case 31:
                    if(ch=='N'){
                        curState = 32;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 32:
                    if(ch=='Y'){
                        curState = 33;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[Y]");
                case 33:
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    if(WS(ch)){
                        curState = 25;
                        consume(ch);
                        continue;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 24, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[>] OR <WS> OR [%]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_INT_SUBSET = 57;
    private boolean int_subset() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_DECL_SEP, 1, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_DECL_SEP, 1, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_MARKUP_DECL, 1, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_MARKUP_DECL, 1, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    expected(ch, "[%] OR <WS> OR [<][?] OR [<][!][A] OR [<][!][N] OR [<][!][\\-] OR [<][!][E][L] OR [<][!][E][N]");
                case 1:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_DECL_SEP, 1, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_DECL_SEP, 1, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_MARKUP_DECL, 1, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_MARKUP_DECL, 1, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_DOCTYPE_DECL = 58;
    private boolean doctype_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='D'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 3:
                    if(ch=='O'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[O]");
                case 4:
                    if(ch=='C'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[C]");
                case 5:
                    if(ch=='T'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[T]");
                case 6:
                    if(ch=='Y'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[Y]");
                case 7:
                    if(ch=='P'){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[P]");
                case 8:
                    if(ch=='E'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 9:
                    if(WS(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 10:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isNameStart(ch)){
                        buffer.push();
                        push(RULE_NAME, 12, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR <NAME_START>");
                case 12:
                    if(WS(ch)){
                        handler.dtdRoot(buffer.pop(0, 0));
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch=='['){
                        handler.dtdRoot(buffer.pop(0, 0));
                        handler.dtdStart();
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    if(ch=='>'){
                        handler.dtdRoot(buffer.pop(0, 0));
                        handler.dtdStart();
                        curState = 21;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [\\[] OR [>]");
                case 13:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='P'){
                        push(RULE_EXTERNAL_ID, 14, 0);
                        push(RULE_PUBLIC_ID, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='S'){
                        push(RULE_EXTERNAL_ID, 14, 0);
                        push(RULE_SYSTEM_ID, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='['){
                        handler.dtdStart();
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    if(ch=='>'){
                        handler.dtdStart();
                        curState = 21;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [P] OR [S] OR [\\[] OR [>]");
                case 14:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='['){
                        handler.dtdStart();
                        curState = 17;
                        consume(ch);
                        continue;
                    }
                    if(ch=='>'){
                        handler.dtdStart();
                        curState = 21;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\[] OR [>] OR <WS>");
                case 17:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_INT_SUBSET, 18, 0);
                            push(RULE_DECL_SEP, 1, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_INT_SUBSET, 18, 0);
                            push(RULE_DECL_SEP, 1, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_INT_SUBSET, 18, 0);
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_INT_SUBSET, 18, 0);
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_INT_SUBSET, 18, 0);
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_INT_SUBSET, 18, 0);
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_INT_SUBSET, 18, 0);
                                        push(RULE_MARKUP_DECL, 1, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_INT_SUBSET, 18, 0);
                                        push(RULE_MARKUP_DECL, 1, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    expected(ch, "[%] OR <WS> OR [<][?] OR [<][!][A] OR [<][!][N] OR [<][!][\\-] OR [<][!][E][L] OR [<][!][E][N]");
                case 18:
                    if(ch==']'){
                        curState = 19;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]]");
                case 19:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='>'){
                        curState = 21;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[>] OR <WS>");
                case 21:
                    handler.dtdEnd();
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_PROLOG = 59;
    private boolean prolog() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            push(RULE_MISC, 2, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='D'){
                                    push(RULE_DOCTYPE_DECL, 4, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_MISC, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<6)
                        continue;
                    if(lookAhead.length()==6){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='?'){
                                if(lookAhead.charAt(2)=='x'){
                                    if(lookAhead.charAt(3)=='m'){
                                        if(lookAhead.charAt(4)=='l'){
                                            if(WS(ch)){
                                                push(RULE_XDECL, 1, 0);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                curState = 6;
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        push(RULE_MISC, 2, 0);
                        push(RULE_PI, -1, 0);
                        consume(FROM_LA);
                        lookAhead.reset();
                        curState = 1;
                        return true;
                    }
                    curState = -1;
                    return true;
                case 1:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            push(RULE_MISC, 2, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_MISC, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='D'){
                                    push(RULE_DOCTYPE_DECL, 4, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_MISC, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                case 2:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            push(RULE_MISC, 2, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_MISC, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='D'){
                                    push(RULE_DOCTYPE_DECL, 4, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_MISC, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                case 4:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            push(RULE_MISC, 4, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='!'){
                                push(RULE_MISC, 4, 0);
                                push(RULE_COMMENT, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_MISC, 4, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_DOCUMENT = 60;
    private boolean document() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            push(RULE_PROLOG, 1, 0);
                            push(RULE_MISC, 2, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                                push(RULE_PROLOG, 1, 0);
                                free -= 2;
                                push(RULE_ELEM, 2, 0);
                                push(RULE_ELEM_ATTRS, 1, 0);
                                consume(FROM_LA);
                                push(RULE_QNAME, 2, 0);
                                buffer.push();
                                buffer.push();
                                push(RULE_NCNAME, 2, 0);
                                consume(FROM_LA);
                                curState = 1;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='D'){
                                    push(RULE_PROLOG, 1, 0);
                                    push(RULE_DOCTYPE_DECL, 4, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_PROLOG, 1, 0);
                                    push(RULE_MISC, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<6)
                        continue;
                    if(lookAhead.length()==6){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='?'){
                                if(lookAhead.charAt(2)=='x'){
                                    if(lookAhead.charAt(3)=='m'){
                                        if(lookAhead.charAt(4)=='l'){
                                            if(WS(ch)){
                                                push(RULE_PROLOG, 1, 0);
                                                push(RULE_XDECL, 1, 0);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                curState = 6;
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        push(RULE_PROLOG, 1, 0);
                        push(RULE_MISC, 2, 0);
                        push(RULE_PI, -1, 0);
                        consume(FROM_LA);
                        lookAhead.reset();
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [<]<NCNAME_START> OR [<][!][D] OR [<][!][\\-] OR [<][?][x][m][l]<WS> OR [<]");
                case 1:
                    if(ch=='<'){
                        push(RULE_ELEM, 2, 0);
                        push(RULE_ELEM_ATTRS, 1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[<]");
                case 2:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            push(RULE_MISC, 2, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='!'){
                                push(RULE_MISC, 2, 0);
                                push(RULE_COMMENT, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_MISC, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_INT_ELEM_CONTENT = 61;
    private boolean int_elem_content() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch==']'){
                            push(RULE_ELEM_CONTENT, 0, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 8;
                            return true;
                        }
                        if(ch=='&'){
                            push(RULE_ELEM_CONTENT, 0, 0);
                            push(RULE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                            push(RULE_ELEM_CONTENT, 0, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 6;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                                push(RULE_ELEM_CONTENT, 0, 0);
                                push(RULE_ELEM, -1, 0);
                                push(RULE_ELEM_ATTRS, 1, 0);
                                consume(FROM_LA);
                                push(RULE_QNAME, 2, 0);
                                buffer.push();
                                buffer.push();
                                push(RULE_NCNAME, 2, 0);
                                consume(FROM_LA);
                                curState = 1;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_ELEM_CONTENT, 0, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='-'){
                                    push(RULE_ELEM_CONTENT, 0, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_ELEM_CONTENT, 0, 0);
                                    push(RULE_CDATA, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_TEXT_DECL = 62;
    private boolean text_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='?'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[?]");
                case 2:
                    if(ch=='x'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[x]");
                case 3:
                    if(ch=='m'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[m]");
                case 4:
                    if(ch=='l'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[l]");
                case 5:
                    if(WS(ch)){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 6:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='v'){
                        push(RULE_VERSION_INFO, 7, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='e'){
                        push(RULE_ENC_DECL, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "[v] OR [e] OR <WS>");
                case 7:
                    if(WS(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS>");
                case 8:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='e'){
                        push(RULE_ENC_DECL, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<WS> OR [e]");
                case 10:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='?'){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [?]");
                case 11:
                    if(ch=='>'){
                        handler.xdeclEnd();
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[>]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_IGNORE_SECT = 63;
    private boolean ignore_sect() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='I'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 1:
                    if(ch=='G'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[G]");
                case 2:
                    if(ch=='N'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 3:
                    if(ch=='O'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[O]");
                case 4:
                    if(ch=='R'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[R]");
                case 5:
                    if(ch=='E'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 6:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='['){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [\\[]");
                case 7:
                    if(ch==']'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='<'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]] OR [<] OR <CHAR>");
                case 8:
                    if(ch==']'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='<'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]] OR [<] OR <CHAR>");
                case 9:
                    if(ch==']'){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    if(ch=='<'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]] OR [<] OR <CHAR>");
                case 10:
                    if((ch=finishAll(ch, ']'))==EOC)
                        return false;
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    if(ch=='<'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[>] OR [\\]] OR [<] OR <CHAR>");
                case 13:
                    if(ch=='!'){
                        curState = 14;
                        consume(ch);
                        continue;
                    }
                    if(ch==']'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='<'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!] OR [\\]] OR [<] OR <CHAR>");
                case 14:
                    if(ch=='['){
                        curState = 15;
                        consume(ch);
                        continue;
                    }
                    if(ch==']'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='<'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\[] OR [\\]] OR [<] OR <CHAR>");
                case 15:
                    if(ch==']'){
                        push(RULE_IGNORE_SECT, 16, 7);
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='<'){
                        push(RULE_IGNORE_SECT, 16, 7);
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        push(RULE_IGNORE_SECT, 16, 7);
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]] OR [<] OR <CHAR>");
                case 16:
                    if(ch==']'){
                        curState = 9;
                        consume(ch);
                        continue;
                    }
                    if(ch=='<'){
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]] OR [<] OR <CHAR>");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_EXT_SUBSET_DECL = 64;
    private boolean ext_subset_decl() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_DECL_SEP, 2, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_DECL_SEP, 2, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_MARKUP_DECL, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_CONDITIONAL_SECT, 2, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                case 2:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_DECL_SEP, 2, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_DECL_SEP, 2, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_MARKUP_DECL, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_CONDITIONAL_SECT, 2, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_CONDITIONAL_SECT = 65;
    private boolean conditional_sect() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[<]");
                case 1:
                    if(ch=='!'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[!]");
                case 2:
                    if(ch=='['){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\[]");
                case 3:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            consume(FROM_LA);
                            curState = 4;
                            continue;
                        }
                        if(ch=='%'){
                            push(RULE_PE_REFERENCE, 3, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='I'){
                            if(ch=='G'){
                                push(RULE_IGNORE_SECT, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='N'){
                                push(RULE_INCLUDE_SECT, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    expected(ch, "<WS> OR [%] OR [I][G] OR [I][N]");
                case 4:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(WS(ch)){
                            consume(FROM_LA);
                            curState = 4;
                            continue;
                        }
                        if(ch=='%'){
                            push(RULE_PE_REFERENCE, 3, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='I'){
                            if(ch=='G'){
                                push(RULE_IGNORE_SECT, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                            if(ch=='N'){
                                push(RULE_INCLUDE_SECT, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    expected(ch, "<WS> OR [%] OR [I][G] OR [I][N]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_INCLUDE_SECT = 66;
    private boolean include_sect() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='I'){
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[I]");
                case 1:
                    if(ch=='N'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[N]");
                case 2:
                    if(ch=='C'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[C]");
                case 3:
                    if(ch=='L'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[L]");
                case 4:
                    if(ch=='U'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[U]");
                case 5:
                    if(ch=='D'){
                        curState = 6;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[D]");
                case 6:
                    if(ch=='E'){
                        curState = 7;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[E]");
                case 7:
                    if((ch=finishAll_WS(ch))==EOC)
                        return false;
                    if(ch=='['){
                        curState = 8;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "<WS> OR [\\[]");
                case 8:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_EXT_SUBSET_DECL, 9, 0);
                            push(RULE_DECL_SEP, 2, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_EXT_SUBSET_DECL, 9, 0);
                            push(RULE_DECL_SEP, 2, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                        if(ch==']'){
                            push(RULE_EXT_SUBSET_DECL, 9, 0);
                            free -= 2;
                            consume(FROM_LA);
                            curState = 10;
                            continue;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_EXT_SUBSET_DECL, 9, 0);
                                push(RULE_MARKUP_DECL, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_EXT_SUBSET_DECL, 9, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_EXT_SUBSET_DECL, 9, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_EXT_SUBSET_DECL, 9, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_EXT_SUBSET_DECL, 9, 0);
                                    push(RULE_CONDITIONAL_SECT, 2, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_EXT_SUBSET_DECL, 9, 0);
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_EXT_SUBSET_DECL, 9, 0);
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    expected(ch, "[%] OR <WS> OR [\\]] OR [<][?] OR [<][!][A] OR [<][!][N] OR [<][!][\\-] OR [<][!][\\[] OR [<][!][E][L] OR [<][!][E][N]");
                case 9:
                    if(ch==']'){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]]");
                case 10:
                    if(ch==']'){
                        curState = 11;
                        consume(ch);
                        continue;
                    }
                    expected(ch, "[\\]]");
                case 11:
                    if(ch=='>'){
                        consume(ch);
                        curState = -1;
                        return true;
                    }
                    expected(ch, "[>]");
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_EXT_SUBSET = 67;
    private boolean ext_subset() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_EXT_SUBSET_DECL, -1, 0);
                            push(RULE_DECL_SEP, 2, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_EXT_SUBSET_DECL, -1, 0);
                            push(RULE_DECL_SEP, 2, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_CONDITIONAL_SECT, 2, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_EXT_SUBSET_DECL, -1, 0);
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_EXT_SUBSET_DECL, -1, 0);
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<6)
                        continue;
                    if(lookAhead.length()==6){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='?'){
                                if(lookAhead.charAt(2)=='x'){
                                    if(lookAhead.charAt(3)=='m'){
                                        if(lookAhead.charAt(4)=='l'){
                                            if(WS(ch)){
                                                push(RULE_TEXT_DECL, 1, 0);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                curState = 6;
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        push(RULE_EXT_SUBSET_DECL, -1, 0);
                        push(RULE_MARKUP_DECL, 2, 0);
                        push(RULE_PI, -1, 0);
                        consume(FROM_LA);
                        lookAhead.reset();
                        curState = 1;
                        return true;
                    }
                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                    free -= 2;
                    curState = -1;
                    return true;
                case 1:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch=='%'){
                            push(RULE_EXT_SUBSET_DECL, -1, 0);
                            push(RULE_DECL_SEP, 2, 0);
                            handler.peReferenceOutsideMarkup();
                            push(RULE_PE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(WS(ch)){
                            push(RULE_EXT_SUBSET_DECL, -1, 0);
                            push(RULE_DECL_SEP, 2, 0);
                            consume(FROM_LA);
                            curState = 3;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch=='?'){
                                push(RULE_EXT_SUBSET_DECL, -1, 0);
                                push(RULE_MARKUP_DECL, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='A'){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_ATT_LIST_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='N'){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_NOTATION_DECL, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    push(RULE_STR_NOTATION, 3, 0);
                                    consume(FROM_LA);
                                    curState = 1;
                                    return true;
                                }
                                if(ch=='-'){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_MARKUP_DECL, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                                    push(RULE_CONDITIONAL_SECT, 2, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<4)
                        continue;
                    if(lookAhead.length()==4){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(lookAhead.charAt(2)=='E'){
                                    if(ch=='L'){
                                        push(RULE_EXT_SUBSET_DECL, -1, 0);
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ELEMENT_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                    if(ch=='N'){
                                        push(RULE_EXT_SUBSET_DECL, -1, 0);
                                        push(RULE_MARKUP_DECL, 2, 0);
                                        push(RULE_ENTITY_DECL, -1, 0);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        consume(FROM_LA);
                                        curState = 4;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                    push(RULE_EXT_SUBSET_DECL, -1, 0);
                    free -= 2;
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_ENTITY_VALUE_CONTENT = 68;
    private boolean entity_value_content() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && ENTITY_CONTENT(ch)){
                        buffer.push();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='&'){
                        push(RULE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, -1, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    expected(ch, "<ENTITY_CONTENT> OR [\\&] OR [%]");
                case 3:
                    if(ch!=EOF && ENTITY_CONTENT(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    handler.rawValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_EXTERNAL_ENTITY_VALUE = 69;
    private boolean external_entity_value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch=='<'){
                        buffer.push();
                        curState = 1;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        buffer.push();
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    buffer.push();
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 1:
                    if(ch=='?'){
                        curState = 2;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 2:
                    if(ch=='x'){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 3:
                    if(ch=='m'){
                        curState = 4;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 4:
                    if(ch=='l'){
                        curState = 5;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 5:
                    if(WS(ch)){
                        buffer.pop(0, 0);
                        curState = 13;
                        consume(ch);
                        continue;
                    }
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 10:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 13:
                    if(ch=='v'){
                        push(RULE_TEXT_DECL, 14, 6);
                        push(RULE_VERSION_INFO, 7, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch=='e'){
                        push(RULE_TEXT_DECL, 14, 6);
                        push(RULE_ENC_DECL, 10, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(WS(ch)){
                        push(RULE_TEXT_DECL, 14, 6);
                        consume(ch);
                        curState = 6;
                        return true;
                    }
                    expected(ch, "[v] OR [e] OR <WS>");
                case 14:
                    if(ch!=EOF && org.apache.xerces.util.XMLChar.isValid(ch)){
                        buffer.push();
                        curState = 10;
                        consume(ch);
                        continue;
                    }
                    buffer.push();
                    handler.externalEntityValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_INT_VALUE = 70;
    private boolean int_value() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                        buffer.push();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='&'){
                        push(RULE_REFERENCE, 6, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    curState = -1;
                    return true;
                case 3:
                    if(ch=='&'){
                        handler.rawValue(buffer.pop(0, 0));
                        push(RULE_REFERENCE, 6, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    handler.rawValue(buffer.pop(0, 0));
                    curState = -1;
                    return true;
                case 6:
                    if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                        buffer.push();
                        curState = 3;
                        consume(ch);
                        continue;
                    }
                    if(ch=='&'){
                        push(RULE_REFERENCE, 6, 0);
                        consume(ch);
                        curState = 1;
                        return true;
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    public static final int RULE_EXT_ELEM_CONTENT = 71;
    private boolean ext_elem_content() throws Exception{
        while(true){
            int ch;
            if(stop || (ch=codePoint())==EOC)
                return false;

            switch(curState){
                case 0:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch==']'){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 8;
                            return true;
                        }
                        if(ch=='&'){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            push(RULE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 6;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                                push(RULE_ELEM_CONTENT, 2, 0);
                                push(RULE_ELEM, -1, 0);
                                push(RULE_ELEM_ATTRS, 1, 0);
                                consume(FROM_LA);
                                push(RULE_QNAME, 2, 0);
                                buffer.push();
                                buffer.push();
                                push(RULE_NCNAME, 2, 0);
                                consume(FROM_LA);
                                curState = 1;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='-'){
                                    push(RULE_ELEM_CONTENT, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_ELEM_CONTENT, 2, 0);
                                    push(RULE_CDATA, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<6)
                        continue;
                    if(lookAhead.length()==6){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='?'){
                                if(lookAhead.charAt(2)=='x'){
                                    if(lookAhead.charAt(3)=='m'){
                                        if(lookAhead.charAt(4)=='l'){
                                            if(WS(ch)){
                                                push(RULE_TEXT_DECL, 1, 0);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                consume(FROM_LA);
                                                curState = 6;
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        push(RULE_ELEM_CONTENT, 2, 0);
                        push(RULE_PI, -1, 0);
                        consume(FROM_LA);
                        lookAhead.reset();
                        curState = 1;
                        return true;
                    }
                    curState = -1;
                    return true;
                case 1:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch==']'){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 8;
                            return true;
                        }
                        if(ch=='&'){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            push(RULE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 6;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                                push(RULE_ELEM_CONTENT, 2, 0);
                                push(RULE_ELEM, -1, 0);
                                push(RULE_ELEM_ATTRS, 1, 0);
                                consume(FROM_LA);
                                push(RULE_QNAME, 2, 0);
                                buffer.push();
                                buffer.push();
                                push(RULE_NCNAME, 2, 0);
                                consume(FROM_LA);
                                curState = 1;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_ELEM_CONTENT, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='-'){
                                    push(RULE_ELEM_CONTENT, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_ELEM_CONTENT, 2, 0);
                                    push(RULE_CDATA, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                case 2:
                    addToLookAhead(ch);
                    if(lookAhead.length()==1){
                        if(ch==']'){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 8;
                            return true;
                        }
                        if(ch=='&'){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            push(RULE_REFERENCE, -1, 0);
                            consume(FROM_LA);
                            curState = 1;
                            return true;
                        }
                        if(ch!=EOF && ELEM_CONTENT_CHAR(ch)){
                            push(RULE_ELEM_CONTENT, 2, 0);
                            buffer.push();
                            consume(FROM_LA);
                            curState = 6;
                            return true;
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<2)
                        continue;
                    if(lookAhead.length()==2){
                        if(lookAhead.charAt(0)=='<'){
                            if(ch!=EOF && org.apache.xerces.util.XMLChar.isNCNameStart(ch)){
                                push(RULE_ELEM_CONTENT, 2, 0);
                                push(RULE_ELEM, -1, 0);
                                push(RULE_ELEM_ATTRS, 1, 0);
                                consume(FROM_LA);
                                push(RULE_QNAME, 2, 0);
                                buffer.push();
                                buffer.push();
                                push(RULE_NCNAME, 2, 0);
                                consume(FROM_LA);
                                curState = 1;
                                return true;
                            }
                            if(ch=='?'){
                                push(RULE_ELEM_CONTENT, 2, 0);
                                push(RULE_PI, -1, 0);
                                consume(FROM_LA);
                                consume(FROM_LA);
                                curState = 2;
                                return true;
                            }
                        }
                    }
                    if(ch!=EOF && lookAhead.length()<3)
                        continue;
                    if(lookAhead.length()==3){
                        if(lookAhead.charAt(0)=='<'){
                            if(lookAhead.charAt(1)=='!'){
                                if(ch=='-'){
                                    push(RULE_ELEM_CONTENT, 2, 0);
                                    push(RULE_COMMENT, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                                if(ch=='['){
                                    push(RULE_ELEM_CONTENT, 2, 0);
                                    push(RULE_CDATA, -1, 0);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    consume(FROM_LA);
                                    curState = 3;
                                    return true;
                                }
                            }
                        }
                    }
                    curState = -1;
                    return true;
                default:
                    throw new Error("impossible state: "+curState);
            }
        }
    }

    @Override
    protected final boolean callRule() throws Exception{
        if(SHOW_STATS)
            callRuleCount++;
        int rule = stack[free-2];
        if(rule<0){
            if(rule==RULE_DYNAMIC_STRING_MATCH)
                return matchString(dynamicStringToBeMatched);
            else
                return matchString(STRING_IDS[-rule]);
        }
        switch(rule){
            case 0:
                return eq();
            case 1:
                return yes_no();
            case 2:
                return sd_decl();
            case 3:
                return enc_name();
            case 4:
                return enc_decl();
            case 5:
                return version_num();
            case 6:
                return version_info();
            case 7:
                return comment();
            case 8:
                return cdata_end();
            case 9:
                return cdata();
            case 10:
                return name();
            case 11:
                return pi_target();
            case 12:
                return pi();
            case 13:
                return ncname();
            case 14:
                return qname();
            case 15:
                return reference();
            case 16:
                return attr();
            case 17:
                return value();
            case 18:
                return q_value();
            case 19:
                return dq_value();
            case 20:
                return elem_attrs();
            case 21:
                return elem_content();
            case 22:
                return elem();
            case 23:
                return xdecl();
            case 24:
                return misc();
            case 25:
                return sytem_literal();
            case 26:
                return pubid_literal();
            case 27:
                return system_id();
            case 28:
                return public_id();
            case 29:
                return notation_decl();
            case 30:
                return external_id();
            case 31:
                return pe_reference();
            case 32:
                return ndata_decl();
            case 33:
                return pe_def();
            case 34:
                return entity_value();
            case 35:
                return q_entity_value();
            case 36:
                return dq_entity_value();
            case 37:
                return entity_decl();
            case 38:
                return entity_def();
            case 39:
                return string_type();
            case 40:
                return tokenized_type();
            case 41:
                return nmtoken();
            case 42:
                return nmtokens();
            case 43:
                return names();
            case 44:
                return enumeration();
            case 45:
                return mixed();
            case 46:
                return notation_type();
            case 47:
                return enumerated_type();
            case 48:
                return att_type();
            case 49:
                return default_decl();
            case 50:
                return att_def();
            case 51:
                return att_list_decl();
            case 52:
                return children();
            case 53:
                return name_cardinality();
            case 54:
                return decl_sep();
            case 55:
                return markup_decl();
            case 56:
                return element_decl();
            case 57:
                return int_subset();
            case 58:
                return doctype_decl();
            case 59:
                return prolog();
            case 60:
                return document();
            case 61:
                return int_elem_content();
            case 62:
                return text_decl();
            case 63:
                return ignore_sect();
            case 64:
                return ext_subset_decl();
            case 65:
                return conditional_sect();
            case 66:
                return include_sect();
            case 67:
                return ext_subset();
            case 68:
                return entity_value_content();
            case 69:
                return external_entity_value();
            case 70:
                return int_value();
            case 71:
                return ext_elem_content();
            default:
                throw new Error("impossible rule: "+stack[free-2]);
        }
    }

    private int finishAll_WS(int ch) throws IOException{
        while(ch!=EOC && WS(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    private int finishAll_ENCODING_PART(int ch) throws IOException{
        while(ch!=EOC && ENCODING_PART(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    private int finishAll_DIGIT(int ch) throws IOException{
        while(ch!=EOC && DIGIT(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    private int finishAll_NAME_PART(int ch) throws IOException{
        while(ch!=EOC && ch!=EOF && org.apache.xerces.util.XMLChar.isName(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    private int finishAll_NCNAME_PART(int ch) throws IOException{
        while(ch!=EOC && ch!=EOF && org.apache.xerces.util.XMLChar.isNCName(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    private int finishAll_HEX_DIGIT(int ch) throws IOException{
        while(ch!=EOC && HEX_DIGIT(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    private int finishAll_PUBID_CHAR(int ch) throws IOException{
        while(ch!=EOC && ch!=EOF && org.apache.xerces.util.XMLChar.isPubid(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    private int finishAll_PUBID_CHAR_NQ(int ch) throws IOException{
        while(ch!=EOC && ch!=EOF && PUBID_CHAR_NQ(ch)){
            consume(ch);
            ch = codePoint();
        }
        return ch;
    }

    @Override
    public void onSuccessful() throws Exception{
        handler.onSuccessful();
    }

    @Override
    public void fatalError(String message) throws Exception{
        handler.fatalError(message);
    }

    protected final jlibs.xml.sax.async.AsyncXMLReader handler;
    public XMLScanner(jlibs.xml.sax.async.AsyncXMLReader handler, int startingRule){
        super(6, startingRule);
        this.handler = handler;
    }
}
