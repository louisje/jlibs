package jlibs.xml.sax.async;

/**
 * DON'T EDIT THIS FILE. THIS IS GENERATED BY JLIBS
 *
 * @author Santhosh Kumar T
 */
public class XMLScanner extends jlibs.nbp.NBParser{

    /*-------------------------------------------------[ Matchers ]---------------------------------------------------*/

    private boolean ANY(int ch){
        return ch!=-1;
    }

    private boolean GT(int ch){
        return ch=='>';
    }

    private boolean BRACKET_CLOSE(int ch){
        return ch==']';
    }

    private boolean Q(int ch){
        return ch=='\'';
    }

    private boolean DQ(int ch){
        return ch=='"';
    }

    private boolean DIGIT(int ch){
        return ch>='0' && ch<='9';
    }

    private boolean HEX_DIGIT(int ch){
        return (DIGIT(ch)) || (ch>='a' && ch<='f') || (ch>='A' && ch<='F');
    }

    private boolean WS(int ch){
        return ch==0x20 || ch==0x9 || ch==0xa || ch==0xd;
    }

    private boolean ENCODING_START(int ch){
        return (ch>='A' && ch<='Z') || (ch>='a' && ch<='z');
    }

    private boolean ENCODING_PART(int ch){
        return (ENCODING_START(ch)) || (DIGIT(ch)) || (ch=='.' || ch=='_' || ch=='-');
    }

    private boolean CHAR(int ch){
        return (ch==0x9 || ch==0xa || ch==0xd) || (ch>=0x20 && ch<=0xd7ff) || (ch>=0xe000 && ch<=0xfffd) || (ch>=0x10000 && ch<=0x10ffff);
    }

    private boolean DASH(int ch){
        return ch=='-';
    }

    private boolean NDASH(int ch){
        return (CHAR(ch)) && (!(ch=='-'));
    }

    private boolean ELEM_CONTENT_CHAR(int ch){
        return (CHAR(ch)) && (!(ch=='<' || ch=='&'));
    }

    private boolean ATTR_Q_CONTENT(int ch){
        return (CHAR(ch)) && (!(ch=='<' || ch=='&' || ch=='\''));
    }

    private boolean ATTR_DQ_CONTENT(int ch){
        return (CHAR(ch)) && (!(ch=='<' || ch=='&' || ch=='"'));
    }

    private boolean ENTITY_Q_CONTENT(int ch){
        return (CHAR(ch)) && (!(ch=='%' || ch=='&' || ch=='\''));
    }

    private boolean ENTITY_DQ_CONTENT(int ch){
        return (CHAR(ch)) && (!(ch=='%' || ch=='&' || ch=='"'));
    }

    private boolean NAME_START(int ch){
        return (ch==':') || (ch>='A' && ch<='Z') || (ch=='_') || (ch>='a' && ch<='z') || (ch>=0xc0 && ch<=0xd6) || (ch>=0xd8 && ch<=0xf6) || (ch>=0xf8 && ch<=0x2ff) || (ch>=0x370 && ch<=0x37d) || (ch>=0x37f && ch<=0x1fff) || (ch>=0x200c && ch<=0x200d) || (ch>=0x2070 && ch<=0x218f) || (ch>=0x2c00 && ch<=0x2fef) || (ch>=0x3001 && ch<=0xd7ff) || (ch>=0xf900 && ch<=0xfdcf) || (ch>=0xfdf0 && ch<=0xfffd) || (ch>=0x10000 && ch<=0xeffff);
    }

    private boolean NAME_PART(int ch){
        return (NAME_START(ch)) || (ch=='-') || (ch=='.') || (DIGIT(ch)) || (ch==0xb7) || (ch>=0x300 && ch<=0x36f) || (ch>=0x203f && ch<=0x2040);
    }

    private boolean NCNAME_START(int ch){
        return (NAME_START(ch)) && (!(ch==':'));
    }

    private boolean NCNAME_PART(int ch){
        return (NAME_PART(ch)) && (!(ch==':'));
    }

    private boolean PUBID_CHAR(int ch){
        return (ch==0x20 || ch==0xd || ch==0xa) || (ch>='A' && ch<='Z') || (ch>='a' && ch<='z') || (DIGIT(ch)) || (ch=='-' || ch=='\'' || ch=='(' || ch==')' || ch=='+' || ch==',' || ch=='.' || ch=='/' || ch==':' || ch=='=' || ch=='?' || ch==';' || ch=='!' || ch=='*' || ch=='#' || ch=='@' || ch=='$' || ch=='_' || ch=='%');
    }

    private boolean PUBID_CHAR_NQ(int ch){
        return (PUBID_CHAR(ch)) && (!(Q(ch)));
    }

    /*-------------------------------------------------[ Rules ]---------------------------------------------------*/

    public static final int RULE_EQ = 0;
    private int eq(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='='){
                    return 1;
                }
                if(WS(ch)){
                    return 0;
                }
                expected(ch, "[=] OR <WS>");
            case 1:
                if(WS(ch)){
                    return 1;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_YES_NO = 1;
    private int yes_no(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='y'){
                    buffer.push();
                    return 1;
                }
                if(ch=='n'){
                    buffer.push();
                    return 4;
                }
                expected(ch, "[y] OR [n]");
            case 1:
                if(ch=='e'){
                    return 2;
                }
                expected(ch, "[e]");
            case 2:
                if(ch=='s'){
                    return 3;
                }
                expected(ch, "[s]");
            case 3:
                handler.standalone(buffer.pop(0, 0));
                return -1;
            case 4:
                if(ch=='o'){
                    return 3;
                }
                expected(ch, "[o]");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_SD_DECL = 2;
    private int sd_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='s'){
                    return 1;
                }
                expected(ch, "[s]");
            case 1:
                if(ch=='t'){
                    return 2;
                }
                expected(ch, "[t]");
            case 2:
                if(ch=='a'){
                    return 3;
                }
                expected(ch, "[a]");
            case 3:
                if(ch=='n'){
                    return 4;
                }
                expected(ch, "[n]");
            case 4:
                if(ch=='d'){
                    return 5;
                }
                expected(ch, "[d]");
            case 5:
                if(ch=='a'){
                    return 6;
                }
                expected(ch, "[a]");
            case 6:
                if(ch=='l'){
                    return 7;
                }
                expected(ch, "[l]");
            case 7:
                if(ch=='o'){
                    return 8;
                }
                expected(ch, "[o]");
            case 8:
                if(ch=='n'){
                    return 9;
                }
                expected(ch, "[n]");
            case 9:
                if(ch=='e'){
                    return 10;
                }
                expected(ch, "[e]");
            case 10:
                if(ch=='='){
                    push(RULE_EQ, 11, 0);
                    return 1;
                }
                if(WS(ch)){
                    push(RULE_EQ, 11, 0);
                    return 0;
                }
                expected(ch, "[=] OR <WS>");
            case 11:
                if(Q(ch)){
                    return 12;
                }
                if(DQ(ch)){
                    return 15;
                }
                expected(ch, "<Q> OR <DQ>");
            case 12:
                if(ch=='y'){
                    push(RULE_YES_NO, 13, 0);
                    buffer.push();
                    return 1;
                }
                if(ch=='n'){
                    push(RULE_YES_NO, 13, 0);
                    buffer.push();
                    return 4;
                }
                expected(ch, "[y] OR [n]");
            case 13:
                if(Q(ch)){
                    return 14;
                }
                expected(ch, "<Q>");
            case 14:
                return -1;
            case 15:
                if(ch=='y'){
                    push(RULE_YES_NO, 16, 0);
                    buffer.push();
                    return 1;
                }
                if(ch=='n'){
                    push(RULE_YES_NO, 16, 0);
                    buffer.push();
                    return 4;
                }
                expected(ch, "[y] OR [n]");
            case 16:
                if(DQ(ch)){
                    return 14;
                }
                expected(ch, "<DQ>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENC_NAME = 3;
    private int enc_name(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ENCODING_START(ch)){
                    buffer.push();
                    return 1;
                }
                expected(ch, "<ENCODING_START>");
            case 1:
                if(ENCODING_PART(ch)){
                    return 1;
                }
                handler.encoding(buffer.pop(0, 0));
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENC_DECL = 4;
    private int enc_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='e'){
                    return 1;
                }
                expected(ch, "[e]");
            case 1:
                if(ch=='n'){
                    return 2;
                }
                expected(ch, "[n]");
            case 2:
                if(ch=='c'){
                    return 3;
                }
                expected(ch, "[c]");
            case 3:
                if(ch=='o'){
                    return 4;
                }
                expected(ch, "[o]");
            case 4:
                if(ch=='d'){
                    return 5;
                }
                expected(ch, "[d]");
            case 5:
                if(ch=='i'){
                    return 6;
                }
                expected(ch, "[i]");
            case 6:
                if(ch=='n'){
                    return 7;
                }
                expected(ch, "[n]");
            case 7:
                if(ch=='g'){
                    return 8;
                }
                expected(ch, "[g]");
            case 8:
                if(ch=='='){
                    push(RULE_EQ, 9, 0);
                    return 1;
                }
                if(WS(ch)){
                    push(RULE_EQ, 9, 0);
                    return 0;
                }
                expected(ch, "[=] OR <WS>");
            case 9:
                if(Q(ch)){
                    return 10;
                }
                if(DQ(ch)){
                    return 13;
                }
                expected(ch, "<Q> OR <DQ>");
            case 10:
                if(ENCODING_START(ch)){
                    push(RULE_ENC_NAME, 11, 0);
                    buffer.push();
                    return 1;
                }
                expected(ch, "<ENCODING_START>");
            case 11:
                if(Q(ch)){
                    return 12;
                }
                expected(ch, "<Q>");
            case 12:
                return -1;
            case 13:
                if(ENCODING_START(ch)){
                    push(RULE_ENC_NAME, 14, 0);
                    buffer.push();
                    return 1;
                }
                expected(ch, "<ENCODING_START>");
            case 14:
                if(DQ(ch)){
                    return 12;
                }
                expected(ch, "<DQ>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_VERSION_NUM = 5;
    private int version_num(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='1'){
                    buffer.push();
                    return 1;
                }
                expected(ch, "[1]");
            case 1:
                if(ch=='.'){
                    return 2;
                }
                expected(ch, "[\\.]");
            case 2:
                if(DIGIT(ch)){
                    return 3;
                }
                expected(ch, "<DIGIT>");
            case 3:
                if(DIGIT(ch)){
                    return 3;
                }
                handler.version(buffer.pop(0, 0));
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_VERSION_INFO = 6;
    private int version_info(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='v'){
                    return 1;
                }
                expected(ch, "[v]");
            case 1:
                if(ch=='e'){
                    return 2;
                }
                expected(ch, "[e]");
            case 2:
                if(ch=='r'){
                    return 3;
                }
                expected(ch, "[r]");
            case 3:
                if(ch=='s'){
                    return 4;
                }
                expected(ch, "[s]");
            case 4:
                if(ch=='i'){
                    return 5;
                }
                expected(ch, "[i]");
            case 5:
                if(ch=='o'){
                    return 6;
                }
                expected(ch, "[o]");
            case 6:
                if(ch=='n'){
                    return 7;
                }
                expected(ch, "[n]");
            case 7:
                if(ch=='='){
                    push(RULE_EQ, 8, 0);
                    return 1;
                }
                if(WS(ch)){
                    push(RULE_EQ, 8, 0);
                    return 0;
                }
                expected(ch, "[=] OR <WS>");
            case 8:
                if(Q(ch)){
                    return 9;
                }
                if(DQ(ch)){
                    return 12;
                }
                expected(ch, "<Q> OR <DQ>");
            case 9:
                if(ch=='1'){
                    push(RULE_VERSION_NUM, 10, 0);
                    buffer.push();
                    return 1;
                }
                expected(ch, "[1]");
            case 10:
                if(Q(ch)){
                    return 11;
                }
                expected(ch, "<Q>");
            case 11:
                return -1;
            case 12:
                if(ch=='1'){
                    push(RULE_VERSION_NUM, 13, 0);
                    buffer.push();
                    return 1;
                }
                expected(ch, "[1]");
            case 13:
                if(DQ(ch)){
                    return 11;
                }
                expected(ch, "<DQ>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_COMMENT = 7;
    private int comment(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='!'){
                    return 2;
                }
                expected(ch, "[!]");
            case 2:
                if(ch=='-'){
                    return 3;
                }
                expected(ch, "[\\-]");
            case 3:
                if(ch=='-'){
                    return 4;
                }
                expected(ch, "[\\-]");
            case 4:
                if(DASH(ch)){
                    buffer.push();
                    return 6;
                }
                if(NDASH(ch)){
                    buffer.push();
                    return 5;
                }
                expected(ch, "<DASH> OR <NDASH>");
            case 5:
                if(DASH(ch)){
                    return 6;
                }
                if(NDASH(ch)){
                    return 5;
                }
                expected(ch, "<DASH> OR <NDASH>");
            case 6:
                if(NDASH(ch)){
                    return 5;
                }
                if(DASH(ch)){
                    return 7;
                }
                expected(ch, "<NDASH> OR <DASH>");
            case 7:
                if(ch=='>'){
                    return 8;
                }
                expected(ch, "[>]");
            case 8:
                handler.comment(buffer.pop(0, 3));
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_CDATA_END = 8;
    private int cdata_end(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(BRACKET_CLOSE(ch)){
                    return 1;
                }
                if(CHAR(ch)){
                    return 0;
                }
                expected(ch, "<BRACKET_CLOSE> OR <CHAR>");
            case 1:
                if(BRACKET_CLOSE(ch)){
                    return 2;
                }
                if(CHAR(ch)){
                    return 0;
                }
                expected(ch, "<BRACKET_CLOSE> OR <CHAR>");
            case 2:
                if(GT(ch)){
                    return 4;
                }
                if(BRACKET_CLOSE(ch)){
                    return 2;
                }
                if(CHAR(ch)){
                    return 0;
                }
                expected(ch, "<GT> OR <BRACKET_CLOSE> OR <CHAR>");
            case 4:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_CDATA = 9;
    private int cdata(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='!'){
                    return 2;
                }
                expected(ch, "[!]");
            case 2:
                if(ch=='['){
                    return 3;
                }
                expected(ch, "[\\[]");
            case 3:
                if(ch=='C'){
                    return 4;
                }
                expected(ch, "[C]");
            case 4:
                if(ch=='D'){
                    return 5;
                }
                expected(ch, "[D]");
            case 5:
                if(ch=='A'){
                    return 6;
                }
                expected(ch, "[A]");
            case 6:
                if(ch=='T'){
                    return 7;
                }
                expected(ch, "[T]");
            case 7:
                if(ch=='A'){
                    return 8;
                }
                expected(ch, "[A]");
            case 8:
                if(ch=='['){
                    return 9;
                }
                expected(ch, "[\\[]");
            case 9:
                if(BRACKET_CLOSE(ch)){
                    buffer.push();
                    push(RULE_CDATA_END, 10, 0);
                    return 1;
                }
                if(CHAR(ch)){
                    buffer.push();
                    push(RULE_CDATA_END, 10, 0);
                    return 0;
                }
                expected(ch, "<BRACKET_CLOSE> OR <CHAR>");
            case 10:
                handler.cdata(buffer.pop(0, 3));
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NAME = 10;
    private int name(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NAME_START(ch)){
                    return 1;
                }
                expected(ch, "<NAME_START>");
            case 1:
                if(NAME_PART(ch)){
                    return 1;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_PI_TARGET = 11;
    private int pi_target(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='x' || ch=='X'){
                    return 1;
                }
                if(NAME_START(ch)){
                    return 7;
                }
                expected(ch, "[xX] OR <NAME_START>");
            case 1:
                if(ch=='m' || ch=='M'){
                    return 2;
                }
                if(NAME_PART(ch)){
                    return 4;
                }
                return -1;
            case 2:
                if(ch=='l' || ch=='L'){
                    return 3;
                }
                if(NAME_PART(ch)){
                    return 4;
                }
                return -1;
            case 3:
                if(NAME_PART(ch)){
                    return 4;
                }
                expected(ch, "<NAME_PART>");
            case 4:
                if(NAME_PART(ch)){
                    return 4;
                }
                return -1;
            case 7:
                if(NAME_PART(ch)){
                    return 4;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_PI = 12;
    private int pi(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='?'){
                    return 2;
                }
                expected(ch, "[?]");
            case 2:
                if(ch=='x' || ch=='X'){
                    buffer.push();
                    push(RULE_PI_TARGET, 3, 0);
                    return 1;
                }
                if(NAME_START(ch)){
                    buffer.push();
                    push(RULE_PI_TARGET, 3, 0);
                    return 7;
                }
                expected(ch, "[xX] OR <NAME_START>");
            case 3:
                if(WS(ch)){
                    handler.piTarget(buffer.pop(0, 0));
                    return 5;
                }
                if(ch=='?'){
                    handler.piTarget(buffer.pop(0, 0));
                    handler.piData();
                    return 12;
                }
                expected(ch, "<WS> OR [?]");
            case 5:
                if(WS(ch)){
                    return 5;
                }
                if(ch=='?'){
                    buffer.push();
                    return 8;
                }
                if(CHAR(ch)){
                    buffer.push();
                    return 7;
                }
                expected(ch, "<WS> OR [?] OR <CHAR>");
            case 7:
                if(ch=='?'){
                    return 8;
                }
                if(CHAR(ch)){
                    return 7;
                }
                expected(ch, "[?] OR <CHAR>");
            case 8:
                if(ch=='>'){
                    handler.piData(buffer.pop(0, 1));
                    return 10;
                }
                if(ch=='?'){
                    return 8;
                }
                if(CHAR(ch)){
                    return 7;
                }
                expected(ch, "[>] OR [?] OR <CHAR>");
            case 10:
                return -1;
            case 12:
                if(ch=='>'){
                    return 13;
                }
                expected(ch, "[>]");
            case 13:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NCNAME = 13;
    private int ncname(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NCNAME_START(ch)){
                    return 1;
                }
                expected(ch, "<NCNAME_START>");
            case 1:
                if(NCNAME_PART(ch)){
                    return 1;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_QNAME = 14;
    private int qname(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NCNAME_START(ch)){
                    buffer.push();
                    buffer.push();
                    push(RULE_NCNAME, 2, 0);
                    return 1;
                }
                expected(ch, "<NCNAME_START>");
            case 2:
                if(ch==':'){
                    handler.prefix(buffer.pop(0, 0));
                    return 4;
                }
                handler.localName(buffer.pop(0, 0));
                handler.qname(buffer.pop(0, 0));
                return -1;
            case 4:
                if(NCNAME_START(ch)){
                    buffer.push();
                    push(RULE_NCNAME, 5, 0);
                    return 1;
                }
                expected(ch, "<NCNAME_START>");
            case 5:
                handler.localName(buffer.pop(0, 0));
                handler.qname(buffer.pop(0, 0));
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_CHAR_REF = 15;
    private int char_ref(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='&'){
                    return 1;
                }
                expected(ch, "[\\&]");
            case 1:
                if(ch=='#'){
                    return 2;
                }
                expected(ch, "[\\#]");
            case 2:
                if(ch=='x'){
                    return 3;
                }
                if(DIGIT(ch)){
                    buffer.push();
                    return 9;
                }
                expected(ch, "[x] OR <DIGIT>");
            case 3:
                if(HEX_DIGIT(ch)){
                    buffer.push();
                    return 4;
                }
                expected(ch, "<HEX_DIGIT>");
            case 4:
                if(ch==';'){
                    handler.hexCode(buffer.pop(0, 0));
                    return 7;
                }
                if(HEX_DIGIT(ch)){
                    return 4;
                }
                expected(ch, "[;] OR <HEX_DIGIT>");
            case 7:
                return -1;
            case 9:
                if(ch==';'){
                    handler.asciiCode(buffer.pop(0, 0));
                    return 7;
                }
                if(DIGIT(ch)){
                    return 9;
                }
                expected(ch, "[;] OR <DIGIT>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENTITY_REF = 16;
    private int entity_ref(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='&'){
                    return 1;
                }
                expected(ch, "[\\&]");
            case 1:
                if(NAME_START(ch)){
                    buffer.push();
                    push(RULE_NAME, 2, 0);
                    return 1;
                }
                expected(ch, "<NAME_START>");
            case 2:
                if(ch==';'){
                    return 3;
                }
                expected(ch, "[;]");
            case 3:
                handler.entityReference(buffer.pop(0, 1));
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_REFERENCE = 17;
    private int reference(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "[\\&][\\#] OR [\\&]<NAME_START>");
            case 1:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ATTR = 18;
    private int attr(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NCNAME_START(ch)){
                    push(RULE_QNAME, 1, 0);
                    buffer.push();
                    buffer.push();
                    push(RULE_NCNAME, 2, 0);
                    return 1;
                }
                expected(ch, "<NCNAME_START>");
            case 1:
                if(ch=='='){
                    push(RULE_EQ, 2, 0);
                    return 1;
                }
                if(WS(ch)){
                    push(RULE_EQ, 2, 0);
                    return 0;
                }
                expected(ch, "[=] OR <WS>");
            case 2:
                if(ch=='"'){
                    push(RULE_VALUE, 3, 0);
                    handler.valueStart();
                    return 1;
                }
                if(ch=='\''){
                    push(RULE_VALUE, 3, 0);
                    handler.valueStart();
                    return 3;
                }
                expected(ch, "[\"] OR [']");
            case 3:
                handler.attributeEnd();
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_VALUE = 19;
    private int value(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='"'){
                    handler.valueStart();
                    return 1;
                }
                if(ch=='\''){
                    handler.valueStart();
                    return 3;
                }
                expected(ch, "[\"] OR [']");
            case 1:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 1;
                if(lookAhead.length()==1){
                    if(ch=='"'){
                        consumed();
                        return 2;
                    }
                    if(ATTR_DQ_CONTENT(ch)){
                        push(RULE_DQ_VALUE, 1, 0);
                        buffer.push();
                        consumed();
                        return 3;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 1;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_DQ_VALUE, 1, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_DQ_VALUE, 1, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "[\"] OR <ATTR_DQ_CONTENT> OR [\\&][\\#] OR [\\&]<NAME_START>");
            case 2:
                handler.valueEnd();
                return -1;
            case 3:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 3;
                if(lookAhead.length()==1){
                    if(ch=='\''){
                        consumed();
                        return 2;
                    }
                    if(ATTR_Q_CONTENT(ch)){
                        push(RULE_Q_VALUE, 3, 0);
                        buffer.push();
                        consumed();
                        return 3;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 3;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_Q_VALUE, 3, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_Q_VALUE, 3, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "['] OR <ATTR_Q_CONTENT> OR [\\&][\\#] OR [\\&]<NAME_START>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_DQ_VALUE = 20;
    private int dq_value(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ATTR_DQ_CONTENT(ch)){
                        buffer.push();
                        consumed();
                        return 3;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "<ATTR_DQ_CONTENT> OR [\\&][\\#] OR [\\&]<NAME_START>");
            case 3:
                if(ATTR_DQ_CONTENT(ch)){
                    return 3;
                }
                handler.rawValue(buffer.pop(0, 0));
                return -1;
            case 5:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_Q_VALUE = 21;
    private int q_value(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ATTR_Q_CONTENT(ch)){
                        buffer.push();
                        consumed();
                        return 3;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "<ATTR_Q_CONTENT> OR [\\&][\\#] OR [\\&]<NAME_START>");
            case 3:
                if(ATTR_Q_CONTENT(ch)){
                    return 3;
                }
                handler.rawValue(buffer.pop(0, 0));
                return -1;
            case 5:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ELEM_ATTRS = 22;
    private int elem_attrs(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(NCNAME_START(ch)){
                    push(RULE_QNAME, 2, 0);
                    buffer.push();
                    buffer.push();
                    push(RULE_NCNAME, 2, 0);
                    return 1;
                }
                expected(ch, "<NCNAME_START>");
            case 2:
                if(WS(ch)){
                    handler.attributesStart();
                    return 4;
                }
                handler.attributesStart();
                return -1;
            case 4:
                if(WS(ch)){
                    return 4;
                }
                if(NCNAME_START(ch)){
                    push(RULE_ATTR, 5, 0);
                    push(RULE_QNAME, 1, 0);
                    buffer.push();
                    buffer.push();
                    push(RULE_NCNAME, 2, 0);
                    return 1;
                }
                return -1;
            case 5:
                if(WS(ch)){
                    return 4;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ELEM_END = 23;
    private int elem_end(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='/'){
                    return 2;
                }
                expected(ch, "[/]");
            case 2:
                if(NCNAME_START(ch)){
                    push(RULE_QNAME, 3, 0);
                    buffer.push();
                    buffer.push();
                    push(RULE_NCNAME, 2, 0);
                    return 1;
                }
                expected(ch, "<NCNAME_START>");
            case 3:
                if(WS(ch)){
                    return 3;
                }
                if(ch=='>'){
                    return 4;
                }
                expected(ch, "<WS> OR [>]");
            case 4:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ELEM_CONTENT = 24;
    private int elem_content(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ch==']'){
                        buffer.push();
                        consumed();
                        return 8;
                    }
                    if(ELEM_CONTENT_CHAR(ch)){
                        buffer.push();
                        consumed();
                        return 6;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        if(NCNAME_START(ch)){
                            push(RULE_ELEM, 15, 0);
                            push(RULE_ELEM_ATTRS, 1, 0);
                            consumed();
                            push(RULE_QNAME, 2, 0);
                            buffer.push();
                            buffer.push();
                            push(RULE_NCNAME, 2, 0);
                            consumed();
                            return 1;
                        }
                        if(ch=='?'){
                            push(RULE_PI, 15, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 0;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='-'){
                                push(RULE_COMMENT, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='['){
                                push(RULE_CDATA, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                expected(ch, "[\\]] OR <ELEM_CONTENT_CHAR> OR [\\&][\\#] OR [\\&]<NAME_START> OR [<]<NCNAME_START> OR [<][?] OR [<][!][\\-] OR [<][!][\\[]");
            case 6:
                if(ch==']'){
                    return 8;
                }
                if(ELEM_CONTENT_CHAR(ch)){
                    return 6;
                }
                handler.characters(buffer.pop(0, 0));
                return -1;
            case 8:
                if(ch==']'){
                    return 9;
                }
                if(ELEM_CONTENT_CHAR(ch)){
                    return 6;
                }
                handler.characters(buffer.pop(0, 0));
                return -1;
            case 9:
                if(ch=='>'){
                    return 11;
                }
                if(ch==']'){
                    return 9;
                }
                if(ELEM_CONTENT_CHAR(ch)){
                    return 6;
                }
                handler.characters(buffer.pop(0, 0));
                return -1;
            case 11:
                handler.fatalError("Text may not contain a literal ']]>' sequence");
                return -1;
            case 13:
                return -1;
            case 15:
                return -1;
            case 17:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ELEM = 25;
    private int elem(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    push(RULE_ELEM_ATTRS, 1, 0);
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='/'){
                    return 2;
                }
                if(ch=='>'){
                    return 5;
                }
                expected(ch, "[/] OR [>]");
            case 2:
                if(ch=='>'){
                    return 3;
                }
                expected(ch, "[>]");
            case 3:
                handler.attributesEnd();
                handler.emptyElementEnd();
                return -1;
            case 5:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 5;
                if(lookAhead.length()==1){
                    if(ch==']'){
                        handler.attributesEnd();
                        push(RULE_ELEM_CONTENT, 6, 0);
                        buffer.push();
                        consumed();
                        return 8;
                    }
                    if(ELEM_CONTENT_CHAR(ch)){
                        handler.attributesEnd();
                        push(RULE_ELEM_CONTENT, 6, 0);
                        buffer.push();
                        consumed();
                        return 6;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 5;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='/'){
                            handler.attributesEnd();
                            push(RULE_ELEM_END, 7, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            handler.attributesEnd();
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            handler.attributesEnd();
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        if(NCNAME_START(ch)){
                            handler.attributesEnd();
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_ELEM, 15, 0);
                            push(RULE_ELEM_ATTRS, 1, 0);
                            consumed();
                            push(RULE_QNAME, 2, 0);
                            buffer.push();
                            buffer.push();
                            push(RULE_NCNAME, 2, 0);
                            consumed();
                            return 1;
                        }
                        if(ch=='?'){
                            handler.attributesEnd();
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_PI, 15, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 5;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='-'){
                                handler.attributesEnd();
                                push(RULE_ELEM_CONTENT, 6, 0);
                                push(RULE_COMMENT, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='['){
                                handler.attributesEnd();
                                push(RULE_ELEM_CONTENT, 6, 0);
                                push(RULE_CDATA, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                expected(ch, "[\\]] OR <ELEM_CONTENT_CHAR> OR [<][/] OR [\\&][\\#] OR [\\&]<NAME_START> OR [<]<NCNAME_START> OR [<][?] OR [<][!][\\-] OR [<][!][\\[]");
            case 6:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 6;
                if(lookAhead.length()==1){
                    if(ch==']'){
                        push(RULE_ELEM_CONTENT, 6, 0);
                        buffer.push();
                        consumed();
                        return 8;
                    }
                    if(ELEM_CONTENT_CHAR(ch)){
                        push(RULE_ELEM_CONTENT, 6, 0);
                        buffer.push();
                        consumed();
                        return 6;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 6;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='/'){
                            push(RULE_ELEM_END, 7, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        if(NCNAME_START(ch)){
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_ELEM, 15, 0);
                            push(RULE_ELEM_ATTRS, 1, 0);
                            consumed();
                            push(RULE_QNAME, 2, 0);
                            buffer.push();
                            buffer.push();
                            push(RULE_NCNAME, 2, 0);
                            consumed();
                            return 1;
                        }
                        if(ch=='?'){
                            push(RULE_ELEM_CONTENT, 6, 0);
                            push(RULE_PI, 15, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 6;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='-'){
                                push(RULE_ELEM_CONTENT, 6, 0);
                                push(RULE_COMMENT, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='['){
                                push(RULE_ELEM_CONTENT, 6, 0);
                                push(RULE_CDATA, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                expected(ch, "[\\]] OR <ELEM_CONTENT_CHAR> OR [<][/] OR [\\&][\\#] OR [\\&]<NAME_START> OR [<]<NCNAME_START> OR [<][?] OR [<][!][\\-] OR [<][!][\\[]");
            case 7:
                handler.elementEnd();
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_XDECL = 26;
    private int xdecl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='?'){
                    return 2;
                }
                expected(ch, "[?]");
            case 2:
                if(ch=='x'){
                    return 3;
                }
                expected(ch, "[x]");
            case 3:
                if(ch=='m'){
                    return 4;
                }
                expected(ch, "[m]");
            case 4:
                if(ch=='l'){
                    return 5;
                }
                expected(ch, "[l]");
            case 5:
                if(WS(ch)){
                    return 6;
                }
                expected(ch, "<WS>");
            case 6:
                if(WS(ch)){
                    return 6;
                }
                if(ch=='v'){
                    push(RULE_VERSION_INFO, 7, 0);
                    return 1;
                }
                expected(ch, "<WS> OR [v]");
            case 7:
                if(WS(ch)){
                    return 8;
                }
                if(ch=='?'){
                    return 14;
                }
                expected(ch, "<WS> OR [?]");
            case 8:
                if(WS(ch)){
                    return 8;
                }
                if(ch=='e'){
                    push(RULE_ENC_DECL, 9, 0);
                    return 1;
                }
                if(ch=='?'){
                    return 14;
                }
                if(ch=='s'){
                    push(RULE_SD_DECL, 12, 0);
                    return 1;
                }
                expected(ch, "<WS> OR [e] OR [?] OR [s]");
            case 9:
                if(WS(ch)){
                    return 10;
                }
                if(ch=='?'){
                    return 14;
                }
                expected(ch, "<WS> OR [?]");
            case 10:
                if(WS(ch)){
                    return 10;
                }
                if(ch=='s'){
                    push(RULE_SD_DECL, 12, 0);
                    return 1;
                }
                if(ch=='?'){
                    return 14;
                }
                expected(ch, "<WS> OR [s] OR [?]");
            case 12:
                if(WS(ch)){
                    return 12;
                }
                if(ch=='?'){
                    return 14;
                }
                expected(ch, "<WS> OR [?]");
            case 14:
                if(ch=='>'){
                    return 15;
                }
                expected(ch, "[>]");
            case 15:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_MISC = 27;
    private int misc(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='!'){
                            push(RULE_COMMENT, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(ch=='?'){
                            push(RULE_PI, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                expected(ch, "<WS> OR [<][!] OR [<][?]");
            case 1:
                if(WS(ch)){
                    return 1;
                }
                return -1;
            case 2:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_SYTEM_LITERAL = 28;
    private int sytem_literal(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(Q(ch)){
                    return 1;
                }
                if(DQ(ch)){
                    return 5;
                }
                expected(ch, "<Q> OR <DQ>");
            case 1:
                if(ch!=-1 && (!(ch=='\''))){
                    buffer.push();
                    return 2;
                }
                if(Q(ch)){
                    buffer.push();
                    handler.systemID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "[^'] OR <Q>");
            case 2:
                if(ch!=-1 && (!(ch=='\''))){
                    return 2;
                }
                if(Q(ch)){
                    handler.systemID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "[^'] OR <Q>");
            case 4:
                return -1;
            case 5:
                if(ch!=-1 && (!(ch=='"'))){
                    buffer.push();
                    return 6;
                }
                if(DQ(ch)){
                    buffer.push();
                    handler.systemID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "[^\"] OR <DQ>");
            case 6:
                if(ch!=-1 && (!(ch=='"'))){
                    return 6;
                }
                if(DQ(ch)){
                    handler.systemID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "[^\"] OR <DQ>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_PUBID_LITERAL = 29;
    private int pubid_literal(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(DQ(ch)){
                    return 1;
                }
                if(Q(ch)){
                    return 5;
                }
                expected(ch, "<DQ> OR <Q>");
            case 1:
                if(PUBID_CHAR(ch)){
                    buffer.push();
                    return 2;
                }
                if(DQ(ch)){
                    buffer.push();
                    handler.publicID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "<PUBID_CHAR> OR <DQ>");
            case 2:
                if(PUBID_CHAR(ch)){
                    return 2;
                }
                if(DQ(ch)){
                    handler.publicID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "<PUBID_CHAR> OR <DQ>");
            case 4:
                return -1;
            case 5:
                if(PUBID_CHAR_NQ(ch)){
                    buffer.push();
                    return 6;
                }
                if(Q(ch)){
                    buffer.push();
                    handler.publicID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "<PUBID_CHAR_NQ> OR <Q>");
            case 6:
                if(PUBID_CHAR_NQ(ch)){
                    return 6;
                }
                if(Q(ch)){
                    handler.publicID(buffer.pop(0, 0));
                    return 4;
                }
                expected(ch, "<PUBID_CHAR_NQ> OR <Q>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_SYSTEM_ID = 30;
    private int system_id(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='S'){
                    return 1;
                }
                expected(ch, "[S]");
            case 1:
                if(ch=='Y'){
                    return 2;
                }
                expected(ch, "[Y]");
            case 2:
                if(ch=='S'){
                    return 3;
                }
                expected(ch, "[S]");
            case 3:
                if(ch=='T'){
                    return 4;
                }
                expected(ch, "[T]");
            case 4:
                if(ch=='E'){
                    return 5;
                }
                expected(ch, "[E]");
            case 5:
                if(ch=='M'){
                    return 6;
                }
                expected(ch, "[M]");
            case 6:
                if(WS(ch)){
                    return 7;
                }
                expected(ch, "<WS>");
            case 7:
                if(Q(ch)){
                    push(RULE_SYTEM_LITERAL, 8, 0);
                    return 1;
                }
                if(DQ(ch)){
                    push(RULE_SYTEM_LITERAL, 8, 0);
                    return 5;
                }
                if(WS(ch)){
                    return 7;
                }
                expected(ch, "<Q> OR <DQ> OR <WS>");
            case 8:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_PUBLIC_ID = 31;
    private int public_id(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='P'){
                    return 1;
                }
                expected(ch, "[P]");
            case 1:
                if(ch=='U'){
                    return 2;
                }
                expected(ch, "[U]");
            case 2:
                if(ch=='B'){
                    return 3;
                }
                expected(ch, "[B]");
            case 3:
                if(ch=='L'){
                    return 4;
                }
                expected(ch, "[L]");
            case 4:
                if(ch=='I'){
                    return 5;
                }
                expected(ch, "[I]");
            case 5:
                if(ch=='C'){
                    return 6;
                }
                expected(ch, "[C]");
            case 6:
                if(WS(ch)){
                    return 7;
                }
                expected(ch, "<WS>");
            case 7:
                if(DQ(ch)){
                    push(RULE_PUBID_LITERAL, 8, 0);
                    return 1;
                }
                if(Q(ch)){
                    push(RULE_PUBID_LITERAL, 8, 0);
                    return 5;
                }
                if(WS(ch)){
                    return 7;
                }
                expected(ch, "<DQ> OR <Q> OR <WS>");
            case 8:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NOTATION_DECL = 32;
    private int notation_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='!'){
                    return 2;
                }
                expected(ch, "[!]");
            case 2:
                if(ch=='N'){
                    return 3;
                }
                expected(ch, "[N]");
            case 3:
                if(ch=='O'){
                    return 4;
                }
                expected(ch, "[O]");
            case 4:
                if(ch=='T'){
                    return 5;
                }
                expected(ch, "[T]");
            case 5:
                if(ch=='A'){
                    return 6;
                }
                expected(ch, "[A]");
            case 6:
                if(ch=='T'){
                    return 7;
                }
                expected(ch, "[T]");
            case 7:
                if(ch=='I'){
                    return 8;
                }
                expected(ch, "[I]");
            case 8:
                if(ch=='O'){
                    return 9;
                }
                expected(ch, "[O]");
            case 9:
                if(ch=='N'){
                    return 10;
                }
                expected(ch, "[N]");
            case 10:
                if(WS(ch)){
                    return 11;
                }
                expected(ch, "<WS>");
            case 11:
                if(WS(ch)){
                    return 11;
                }
                if(NAME_START(ch)){
                    push(RULE_NAME, 12, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_START>");
            case 12:
                if(WS(ch)){
                    return 13;
                }
                expected(ch, "<WS>");
            case 13:
                if(ch=='P'){
                    push(RULE_PUBLIC_ID, 14, 0);
                    return 1;
                }
                if(ch=='S'){
                    push(RULE_SYSTEM_ID, 17, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 13;
                }
                expected(ch, "[P] OR [S] OR <WS>");
            case 14:
                if(WS(ch)){
                    return 15;
                }
                if(ch=='>'){
                    return 19;
                }
                expected(ch, "<WS> OR [>]");
            case 15:
                if(WS(ch)){
                    return 15;
                }
                if(ch=='S'){
                    push(RULE_SYSTEM_ID, 17, 0);
                    return 1;
                }
                if(ch=='>'){
                    return 19;
                }
                expected(ch, "<WS> OR [S] OR [>]");
            case 17:
                if(WS(ch)){
                    return 17;
                }
                if(ch=='>'){
                    return 19;
                }
                expected(ch, "<WS> OR [>]");
            case 19:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_EXTERNAL_ID = 33;
    private int external_id(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='P'){
                    push(RULE_PUBLIC_ID, 1, 0);
                    return 1;
                }
                if(ch=='S'){
                    push(RULE_SYSTEM_ID, 4, 0);
                    return 1;
                }
                expected(ch, "[P] OR [S]");
            case 1:
                if(WS(ch)){
                    return 2;
                }
                expected(ch, "<WS>");
            case 2:
                if(WS(ch)){
                    return 2;
                }
                if(ch=='S'){
                    push(RULE_SYSTEM_ID, 4, 0);
                    return 1;
                }
                expected(ch, "<WS> OR [S]");
            case 4:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_PE_REFERENCE = 34;
    private int pe_reference(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='%'){
                    return 1;
                }
                expected(ch, "[%]");
            case 1:
                if(NAME_START(ch)){
                    push(RULE_NAME, 2, 0);
                    return 1;
                }
                expected(ch, "<NAME_START>");
            case 2:
                if(ch==';'){
                    return 3;
                }
                expected(ch, "[;]");
            case 3:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NDATA_DECL = 35;
    private int ndata_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(WS(ch)){
                    return 1;
                }
                expected(ch, "<WS>");
            case 1:
                if(ch=='N'){
                    return 2;
                }
                if(WS(ch)){
                    return 1;
                }
                expected(ch, "[N] OR <WS>");
            case 2:
                if(ch=='D'){
                    return 3;
                }
                expected(ch, "[D]");
            case 3:
                if(ch=='A'){
                    return 4;
                }
                expected(ch, "[A]");
            case 4:
                if(ch=='T'){
                    return 5;
                }
                expected(ch, "[T]");
            case 5:
                if(ch=='A'){
                    return 6;
                }
                expected(ch, "[A]");
            case 6:
                if(WS(ch)){
                    return 7;
                }
                expected(ch, "<WS>");
            case 7:
                if(NAME_START(ch)){
                    push(RULE_NAME, 8, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 7;
                }
                expected(ch, "<NAME_START> OR <WS>");
            case 8:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_PE_DEF = 36;
    private int pe_def(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='P'){
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_PUBLIC_ID, 1, 0);
                    return 1;
                }
                if(ch=='S'){
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_SYSTEM_ID, 4, 0);
                    return 1;
                }
                if(Q(ch)){
                    push(RULE_ENTITY_VALUE, 1, 0);
                    handler.valueStart();
                    return 1;
                }
                if(DQ(ch)){
                    push(RULE_ENTITY_VALUE, 1, 0);
                    handler.valueStart();
                    return 3;
                }
                expected(ch, "[P] OR [S] OR <Q> OR <DQ>");
            case 1:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENTITY_VALUE = 37;
    private int entity_value(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(Q(ch)){
                    handler.valueStart();
                    return 1;
                }
                if(DQ(ch)){
                    handler.valueStart();
                    return 3;
                }
                expected(ch, "<Q> OR <DQ>");
            case 1:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 1;
                if(lookAhead.length()==1){
                    if(ch=='%'){
                        push(RULE_Q_ENTITY_VALUE, 1, 0);
                        push(RULE_PE_REFERENCE, 6, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 1;
                if(lookAhead.length()==2){
                    if(DQ(lookAhead.charAt(0))){
                        consumed();
                        handler.valueEnd();
                        return -1;
                    }
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_Q_ENTITY_VALUE, 1, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_Q_ENTITY_VALUE, 1, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                if(ENTITY_Q_CONTENT(lookAhead.charAt(0))){
                    push(RULE_Q_ENTITY_VALUE, 1, 0);
                    buffer.push();
                    consumed();
                    lookAhead.reset();
                    return 3;
                }
                expected(ch, "[%] OR <DQ><EOF> OR [\\&][\\#] OR [\\&]<NAME_START> OR <ENTITY_Q_CONTENT>");
            case 2:
                handler.valueEnd();
                return -1;
            case 3:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 3;
                if(lookAhead.length()==1){
                    if(DQ(ch)){
                        consumed();
                        return 2;
                    }
                    if(ENTITY_DQ_CONTENT(ch)){
                        push(RULE_DQ_ENTITY_VALUE, 3, 0);
                        buffer.push();
                        consumed();
                        return 3;
                    }
                    if(ch=='%'){
                        push(RULE_DQ_ENTITY_VALUE, 3, 0);
                        push(RULE_PE_REFERENCE, 6, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 3;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_DQ_ENTITY_VALUE, 3, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_DQ_ENTITY_VALUE, 3, 0);
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "<DQ> OR <ENTITY_DQ_CONTENT> OR [%] OR [\\&][\\#] OR [\\&]<NAME_START>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_Q_ENTITY_VALUE = 38;
    private int q_entity_value(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ENTITY_Q_CONTENT(ch)){
                        buffer.push();
                        consumed();
                        return 3;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 6, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "<ENTITY_Q_CONTENT> OR [%] OR [\\&][\\#] OR [\\&]<NAME_START>");
            case 3:
                if(ENTITY_Q_CONTENT(ch)){
                    return 3;
                }
                handler.rawValue(buffer.pop(0, 0));
                return -1;
            case 5:
                return -1;
            case 6:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_DQ_ENTITY_VALUE = 39;
    private int dq_entity_value(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ENTITY_DQ_CONTENT(ch)){
                        buffer.push();
                        consumed();
                        return 3;
                    }
                    if(ch=='%'){
                        push(RULE_PE_REFERENCE, 6, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_REFERENCE, 5, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                expected(ch, "<ENTITY_DQ_CONTENT> OR [%] OR [\\&][\\#] OR [\\&]<NAME_START>");
            case 3:
                if(ENTITY_DQ_CONTENT(ch)){
                    return 3;
                }
                handler.rawValue(buffer.pop(0, 0));
                return -1;
            case 5:
                return -1;
            case 6:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENTITY_DECL = 40;
    private int entity_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='!'){
                    return 2;
                }
                expected(ch, "[!]");
            case 2:
                if(ch=='E'){
                    return 3;
                }
                expected(ch, "[E]");
            case 3:
                if(ch=='N'){
                    return 4;
                }
                expected(ch, "[N]");
            case 4:
                if(ch=='T'){
                    return 5;
                }
                expected(ch, "[T]");
            case 5:
                if(ch=='I'){
                    return 6;
                }
                expected(ch, "[I]");
            case 6:
                if(ch=='T'){
                    return 7;
                }
                expected(ch, "[T]");
            case 7:
                if(ch=='Y'){
                    return 8;
                }
                expected(ch, "[Y]");
            case 8:
                if(WS(ch)){
                    return 9;
                }
                expected(ch, "<WS>");
            case 9:
                if(WS(ch)){
                    return 9;
                }
                if(ch=='%'){
                    return 10;
                }
                if(NAME_START(ch)){
                    buffer.push();
                    push(RULE_NAME, 17, 0);
                    return 1;
                }
                expected(ch, "<WS> OR [%] OR <NAME_START>");
            case 10:
                if(WS(ch)){
                    return 11;
                }
                expected(ch, "<WS>");
            case 11:
                if(NAME_START(ch)){
                    push(RULE_NAME, 12, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 11;
                }
                expected(ch, "<NAME_START> OR <WS>");
            case 12:
                if(WS(ch)){
                    return 13;
                }
                expected(ch, "<WS>");
            case 13:
                if(ch=='P'){
                    push(RULE_PE_DEF, 14, 0);
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_PUBLIC_ID, 1, 0);
                    return 1;
                }
                if(ch=='S'){
                    push(RULE_PE_DEF, 14, 0);
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_SYSTEM_ID, 4, 0);
                    return 1;
                }
                if(Q(ch)){
                    push(RULE_PE_DEF, 14, 0);
                    push(RULE_ENTITY_VALUE, 1, 0);
                    handler.valueStart();
                    return 1;
                }
                if(DQ(ch)){
                    push(RULE_PE_DEF, 14, 0);
                    push(RULE_ENTITY_VALUE, 1, 0);
                    handler.valueStart();
                    return 3;
                }
                if(WS(ch)){
                    return 13;
                }
                expected(ch, "[P] OR [S] OR <Q> OR <DQ> OR <WS>");
            case 14:
                if(ch=='>'){
                    return 15;
                }
                if(WS(ch)){
                    return 14;
                }
                expected(ch, "[>] OR <WS>");
            case 15:
                return -1;
            case 17:
                if(WS(ch)){
                    handler.entityName(buffer.pop(0, 0));
                    return 18;
                }
                expected(ch, "<WS>");
            case 18:
                if(ch=='P'){
                    push(RULE_ENTITY_DEF, 19, 0);
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_PUBLIC_ID, 1, 0);
                    return 1;
                }
                if(ch=='S'){
                    push(RULE_ENTITY_DEF, 19, 0);
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_SYSTEM_ID, 4, 0);
                    return 1;
                }
                if(Q(ch)){
                    push(RULE_ENTITY_DEF, 19, 0);
                    push(RULE_ENTITY_VALUE, 2, 0);
                    handler.valueStart();
                    return 1;
                }
                if(DQ(ch)){
                    push(RULE_ENTITY_DEF, 19, 0);
                    push(RULE_ENTITY_VALUE, 2, 0);
                    handler.valueStart();
                    return 3;
                }
                if(WS(ch)){
                    return 18;
                }
                expected(ch, "[P] OR [S] OR <Q> OR <DQ> OR <WS>");
            case 19:
                if(WS(ch)){
                    return 19;
                }
                if(ch=='>'){
                    return 20;
                }
                expected(ch, "<WS> OR [>]");
            case 20:
                handler.entityEnd();
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENTITY_DEF = 41;
    private int entity_def(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='P'){
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_PUBLIC_ID, 1, 0);
                    return 1;
                }
                if(ch=='S'){
                    push(RULE_EXTERNAL_ID, 1, 0);
                    push(RULE_SYSTEM_ID, 4, 0);
                    return 1;
                }
                if(Q(ch)){
                    push(RULE_ENTITY_VALUE, 2, 0);
                    handler.valueStart();
                    return 1;
                }
                if(DQ(ch)){
                    push(RULE_ENTITY_VALUE, 2, 0);
                    handler.valueStart();
                    return 3;
                }
                expected(ch, "[P] OR [S] OR <Q> OR <DQ>");
            case 1:
                if(WS(ch)){
                    push(RULE_NDATA_DECL, 2, 0);
                    return 1;
                }
                return -1;
            case 2:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_STRING_TYPE = 42;
    private int string_type(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='C'){
                    return 1;
                }
                expected(ch, "[C]");
            case 1:
                if(ch=='D'){
                    return 2;
                }
                expected(ch, "[D]");
            case 2:
                if(ch=='A'){
                    return 3;
                }
                expected(ch, "[A]");
            case 3:
                if(ch=='T'){
                    return 4;
                }
                expected(ch, "[T]");
            case 4:
                if(ch=='A'){
                    return 5;
                }
                expected(ch, "[A]");
            case 5:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_TOKENIZED_TYPE = 43;
    private int tokenized_type(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='E'){
                    return 1;
                }
                if(ch=='N'){
                    return 9;
                }
                if(ch=='I'){
                    return 16;
                }
                expected(ch, "[E] OR [N] OR [I]");
            case 1:
                if(ch=='N'){
                    return 2;
                }
                expected(ch, "[N]");
            case 2:
                if(ch=='T'){
                    return 3;
                }
                expected(ch, "[T]");
            case 3:
                if(ch=='I'){
                    return 4;
                }
                expected(ch, "[I]");
            case 4:
                if(ch=='T'){
                    return 5;
                }
                expected(ch, "[T]");
            case 5:
                if(ch=='I'){
                    return 6;
                }
                if(ch=='Y'){
                    return 8;
                }
                expected(ch, "[I] OR [Y]");
            case 6:
                if(ch=='E'){
                    return 7;
                }
                expected(ch, "[E]");
            case 7:
                if(ch=='S'){
                    return 8;
                }
                expected(ch, "[S]");
            case 8:
                return -1;
            case 9:
                if(ch=='M'){
                    return 10;
                }
                expected(ch, "[M]");
            case 10:
                if(ch=='T'){
                    return 11;
                }
                expected(ch, "[T]");
            case 11:
                if(ch=='O'){
                    return 12;
                }
                expected(ch, "[O]");
            case 12:
                if(ch=='K'){
                    return 13;
                }
                expected(ch, "[K]");
            case 13:
                if(ch=='E'){
                    return 14;
                }
                expected(ch, "[E]");
            case 14:
                if(ch=='N'){
                    return 15;
                }
                expected(ch, "[N]");
            case 15:
                if(ch=='S'){
                    return 8;
                }
                return -1;
            case 16:
                if(ch=='D'){
                    return 17;
                }
                expected(ch, "[D]");
            case 17:
                if(ch=='R'){
                    return 18;
                }
                return -1;
            case 18:
                if(ch=='E'){
                    return 19;
                }
                expected(ch, "[E]");
            case 19:
                if(ch=='F'){
                    return 20;
                }
                expected(ch, "[F]");
            case 20:
                if(ch=='S'){
                    return 8;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NMTOKEN = 44;
    private int nmtoken(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NAME_PART(ch)){
                    return 1;
                }
                expected(ch, "<NAME_PART>");
            case 1:
                if(NAME_PART(ch)){
                    return 1;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NMTOKENS = 45;
    private int nmtokens(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NAME_PART(ch)){
                    push(RULE_NMTOKEN, 1, 0);
                    return 1;
                }
                expected(ch, "<NAME_PART>");
            case 1:
                if(ch==0x20){
                    return 2;
                }
                expected(ch, "[#x20;]");
            case 2:
                if(NAME_PART(ch)){
                    push(RULE_NMTOKEN, 3, 0);
                    return 1;
                }
                expected(ch, "<NAME_PART>");
            case 3:
                if(ch==0x20){
                    return 2;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NAMES = 46;
    private int names(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NAME_START(ch)){
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                expected(ch, "<NAME_START>");
            case 1:
                if(ch==0x20){
                    return 2;
                }
                expected(ch, "[#x20;]");
            case 2:
                if(NAME_START(ch)){
                    push(RULE_NAME, 3, 0);
                    return 1;
                }
                expected(ch, "<NAME_START>");
            case 3:
                if(ch==0x20){
                    return 2;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENUMERATION = 47;
    private int enumeration(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='('){
                    return 1;
                }
                expected(ch, "[(]");
            case 1:
                if(WS(ch)){
                    return 1;
                }
                if(NAME_PART(ch)){
                    push(RULE_NMTOKEN, 2, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_PART>");
            case 2:
                if(WS(ch)){
                    return 2;
                }
                if(ch=='|'){
                    return 4;
                }
                expected(ch, "<WS> OR [|]");
            case 4:
                if(WS(ch)){
                    return 4;
                }
                if(NAME_PART(ch)){
                    push(RULE_NMTOKEN, 5, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_PART>");
            case 5:
                if(WS(ch)){
                    return 5;
                }
                if(ch==')'){
                    return 7;
                }
                if(ch=='|'){
                    return 4;
                }
                expected(ch, "<WS> OR [)] OR [|]");
            case 7:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_MIXED = 48;
    private int mixed(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='('){
                    return 1;
                }
                expected(ch, "[(]");
            case 1:
                if(WS(ch)){
                    return 1;
                }
                if(ch=='#'){
                    return 3;
                }
                expected(ch, "<WS> OR [\\#]");
            case 2:
                if(ch=='#'){
                    return 3;
                }
                expected(ch, "[\\#]");
            case 3:
                if(ch=='P'){
                    return 4;
                }
                expected(ch, "[P]");
            case 4:
                if(ch=='C'){
                    return 5;
                }
                expected(ch, "[C]");
            case 5:
                if(ch=='D'){
                    return 6;
                }
                expected(ch, "[D]");
            case 6:
                if(ch=='A'){
                    return 7;
                }
                expected(ch, "[A]");
            case 7:
                if(ch=='T'){
                    return 8;
                }
                expected(ch, "[T]");
            case 8:
                if(ch=='A'){
                    return 9;
                }
                expected(ch, "[A]");
            case 9:
                if(ch=='|'){
                    return 11;
                }
                if(ch==')'){
                    return 15;
                }
                if(WS(ch)){
                    return 9;
                }
                expected(ch, "[|] OR [)] OR <WS>");
            case 11:
                if(WS(ch)){
                    return 11;
                }
                if(NAME_START(ch)){
                    push(RULE_NAME, 12, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_START>");
            case 12:
                if(WS(ch)){
                    return 12;
                }
                if(ch=='|'){
                    return 11;
                }
                if(ch==')'){
                    return 15;
                }
                expected(ch, "<WS> OR [|] OR [)]");
            case 15:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NOTATION_TYPE = 49;
    private int notation_type(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='N'){
                    return 1;
                }
                expected(ch, "[N]");
            case 1:
                if(ch=='O'){
                    return 2;
                }
                expected(ch, "[O]");
            case 2:
                if(ch=='T'){
                    return 3;
                }
                expected(ch, "[T]");
            case 3:
                if(ch=='A'){
                    return 4;
                }
                expected(ch, "[A]");
            case 4:
                if(ch=='T'){
                    return 5;
                }
                expected(ch, "[T]");
            case 5:
                if(ch=='I'){
                    return 6;
                }
                expected(ch, "[I]");
            case 6:
                if(ch=='O'){
                    return 7;
                }
                expected(ch, "[O]");
            case 7:
                if(ch=='N'){
                    return 8;
                }
                expected(ch, "[N]");
            case 8:
                if(WS(ch)){
                    return 8;
                }
                if(ch=='('){
                    return 9;
                }
                expected(ch, "<WS> OR [(]");
            case 9:
                if(WS(ch)){
                    return 9;
                }
                if(NAME_START(ch)){
                    push(RULE_NAME, 10, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_START>");
            case 10:
                if(WS(ch)){
                    return 10;
                }
                if(ch=='|'){
                    return 12;
                }
                expected(ch, "<WS> OR [|]");
            case 12:
                if(NAME_START(ch)){
                    push(RULE_NAME, 13, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 12;
                }
                expected(ch, "<NAME_START> OR <WS>");
            case 13:
                if(WS(ch)){
                    return 13;
                }
                if(ch==')'){
                    return 15;
                }
                if(ch=='|'){
                    return 12;
                }
                expected(ch, "<WS> OR [)] OR [|]");
            case 15:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ENUMERATED_TYPE = 50;
    private int enumerated_type(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='N'){
                    push(RULE_NOTATION_TYPE, 1, 0);
                    return 1;
                }
                if(ch=='('){
                    push(RULE_ENUMERATION, 1, 0);
                    return 1;
                }
                expected(ch, "[N] OR [(]");
            case 1:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ATT_TYPE = 51;
    private int att_type(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ch=='('){
                        push(RULE_ENUMERATED_TYPE, 1, 0);
                        push(RULE_ENUMERATION, 1, 0);
                        consumed();
                        return 1;
                    }
                    if(ch=='E'){
                        push(RULE_TOKENIZED_TYPE, 1, 0);
                        consumed();
                        return 1;
                    }
                    if(ch=='I'){
                        push(RULE_TOKENIZED_TYPE, 1, 0);
                        consumed();
                        return 16;
                    }
                    if(ch=='C'){
                        push(RULE_STRING_TYPE, 1, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='N'){
                        if(ch=='O'){
                            push(RULE_ENUMERATED_TYPE, 1, 0);
                            push(RULE_NOTATION_TYPE, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(ch=='M'){
                            push(RULE_TOKENIZED_TYPE, 1, 0);
                            consumed();
                            consumed();
                            return 10;
                        }
                    }
                }
                expected(ch, "[(] OR [E] OR [I] OR [C] OR [N][O] OR [N][M]");
            case 1:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_DEFAULT_DECL = 52;
    private int default_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='#'){
                    return 1;
                }
                expected(ch, "[\\#]");
            case 1:
                if(ch=='R'){
                    return 2;
                }
                if(ch=='I'){
                    return 10;
                }
                if(ch=='F'){
                    return 17;
                }
                if(ch=='"'){
                    push(RULE_VALUE, 24, 0);
                    handler.valueStart();
                    return 1;
                }
                if(ch=='\''){
                    push(RULE_VALUE, 24, 0);
                    handler.valueStart();
                    return 3;
                }
                expected(ch, "[R] OR [I] OR [F] OR [\"] OR [']");
            case 2:
                if(ch=='E'){
                    return 3;
                }
                expected(ch, "[E]");
            case 3:
                if(ch=='Q'){
                    return 4;
                }
                expected(ch, "[Q]");
            case 4:
                if(ch=='U'){
                    return 5;
                }
                expected(ch, "[U]");
            case 5:
                if(ch=='I'){
                    return 6;
                }
                expected(ch, "[I]");
            case 6:
                if(ch=='R'){
                    return 7;
                }
                expected(ch, "[R]");
            case 7:
                if(ch=='E'){
                    return 8;
                }
                expected(ch, "[E]");
            case 8:
                if(ch=='D'){
                    return 9;
                }
                expected(ch, "[D]");
            case 9:
                return -1;
            case 10:
                if(ch=='M'){
                    return 11;
                }
                expected(ch, "[M]");
            case 11:
                if(ch=='P'){
                    return 12;
                }
                expected(ch, "[P]");
            case 12:
                if(ch=='L'){
                    return 13;
                }
                expected(ch, "[L]");
            case 13:
                if(ch=='I'){
                    return 14;
                }
                expected(ch, "[I]");
            case 14:
                if(ch=='E'){
                    return 15;
                }
                expected(ch, "[E]");
            case 15:
                if(ch=='D'){
                    return 16;
                }
                expected(ch, "[D]");
            case 16:
                return -1;
            case 17:
                if(ch=='I'){
                    return 18;
                }
                expected(ch, "[I]");
            case 18:
                if(ch=='X'){
                    return 19;
                }
                expected(ch, "[X]");
            case 19:
                if(ch=='E'){
                    return 20;
                }
                expected(ch, "[E]");
            case 20:
                if(ch=='D'){
                    return 21;
                }
                expected(ch, "[D]");
            case 21:
                if(WS(ch)){
                    return 22;
                }
                expected(ch, "<WS>");
            case 22:
                if(WS(ch)){
                    return 22;
                }
                if(ch=='"'){
                    push(RULE_VALUE, 24, 0);
                    handler.valueStart();
                    return 1;
                }
                if(ch=='\''){
                    push(RULE_VALUE, 24, 0);
                    handler.valueStart();
                    return 3;
                }
                expected(ch, "<WS> OR [\"] OR [']");
            case 24:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ATT_DEF = 53;
    private int att_def(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NAME_START(ch)){
                    buffer.push();
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                expected(ch, "<NAME_START>");
            case 1:
                if(WS(ch)){
                    handler.dtdAttribute(buffer.pop(0, 0));
                    return 2;
                }
                expected(ch, "<WS>");
            case 2:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 2;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        consumed();
                        return 2;
                    }
                    if(ch=='('){
                        push(RULE_ATT_TYPE, 3, 0);
                        push(RULE_ENUMERATED_TYPE, 1, 0);
                        push(RULE_ENUMERATION, 1, 0);
                        consumed();
                        return 1;
                    }
                    if(ch=='E'){
                        push(RULE_ATT_TYPE, 3, 0);
                        push(RULE_TOKENIZED_TYPE, 1, 0);
                        consumed();
                        return 1;
                    }
                    if(ch=='I'){
                        push(RULE_ATT_TYPE, 3, 0);
                        push(RULE_TOKENIZED_TYPE, 1, 0);
                        consumed();
                        return 16;
                    }
                    if(ch=='C'){
                        push(RULE_ATT_TYPE, 3, 0);
                        push(RULE_STRING_TYPE, 1, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 2;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='N'){
                        if(ch=='O'){
                            push(RULE_ATT_TYPE, 3, 0);
                            push(RULE_ENUMERATED_TYPE, 1, 0);
                            push(RULE_NOTATION_TYPE, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(ch=='M'){
                            push(RULE_ATT_TYPE, 3, 0);
                            push(RULE_TOKENIZED_TYPE, 1, 0);
                            consumed();
                            consumed();
                            return 10;
                        }
                    }
                }
                expected(ch, "<WS> OR [(] OR [E] OR [I] OR [C] OR [N][O] OR [N][M]");
            case 3:
                if(WS(ch)){
                    return 4;
                }
                expected(ch, "<WS>");
            case 4:
                if(WS(ch)){
                    return 4;
                }
                if(ch=='#'){
                    push(RULE_DEFAULT_DECL, 5, 0);
                    return 1;
                }
                expected(ch, "<WS> OR [\\#]");
            case 5:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ATT_LIST_DECL = 54;
    private int att_list_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='!'){
                    return 2;
                }
                expected(ch, "[!]");
            case 2:
                if(ch=='A'){
                    return 3;
                }
                expected(ch, "[A]");
            case 3:
                if(ch=='T'){
                    return 4;
                }
                expected(ch, "[T]");
            case 4:
                if(ch=='T'){
                    return 5;
                }
                expected(ch, "[T]");
            case 5:
                if(ch=='L'){
                    return 6;
                }
                expected(ch, "[L]");
            case 6:
                if(ch=='I'){
                    return 7;
                }
                expected(ch, "[I]");
            case 7:
                if(ch=='S'){
                    return 8;
                }
                expected(ch, "[S]");
            case 8:
                if(ch=='T'){
                    return 9;
                }
                expected(ch, "[T]");
            case 9:
                if(WS(ch)){
                    return 10;
                }
                expected(ch, "<WS>");
            case 10:
                if(WS(ch)){
                    return 10;
                }
                if(NAME_START(ch)){
                    buffer.push();
                    push(RULE_NAME, 12, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_START>");
            case 12:
                if(WS(ch)){
                    handler.dtdAttributesStart(buffer.pop(0, 0));
                    return 14;
                }
                if(ch=='>'){
                    handler.dtdAttributesStart(buffer.pop(0, 0));
                    return 17;
                }
                expected(ch, "<WS> OR [>]");
            case 14:
                if(NAME_START(ch)){
                    push(RULE_ATT_DEF, 15, 0);
                    buffer.push();
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 14;
                }
                if(ch=='>'){
                    return 17;
                }
                expected(ch, "<NAME_START> OR <WS> OR [>]");
            case 15:
                if(ch=='>'){
                    return 17;
                }
                if(WS(ch)){
                    return 14;
                }
                expected(ch, "[>] OR <WS>");
            case 17:
                handler.dtdAttributesEnd();
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_CHILDREN = 55;
    private int children(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='('){
                    return 1;
                }
                expected(ch, "[(]");
            case 1:
                if(WS(ch)){
                    return 1;
                }
                if(ch=='('){
                    push(RULE_CHILDREN, 3, 0);
                    return 1;
                }
                if(NAME_START(ch)){
                    push(RULE_NAME_CARDINALITY, 3, 0);
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                expected(ch, "<WS> OR [(] OR <NAME_START>");
            case 2:
                if(ch=='('){
                    push(RULE_CHILDREN, 3, 0);
                    return 1;
                }
                if(NAME_START(ch)){
                    push(RULE_NAME_CARDINALITY, 3, 0);
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                expected(ch, "[(] OR <NAME_START>");
            case 3:
                if(WS(ch)){
                    return 3;
                }
                if(ch=='|'){
                    return 6;
                }
                if(ch==','){
                    return 13;
                }
                if(ch==')'){
                    return 10;
                }
                expected(ch, "<WS> OR [|] OR [,] OR [)]");
            case 6:
                if(ch=='('){
                    push(RULE_CHILDREN, 7, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 6;
                }
                if(NAME_START(ch)){
                    push(RULE_NAME_CARDINALITY, 7, 0);
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                expected(ch, "[(] OR <WS> OR <NAME_START>");
            case 7:
                if(WS(ch)){
                    return 7;
                }
                if(ch=='|'){
                    return 6;
                }
                if(ch==')'){
                    return 10;
                }
                expected(ch, "<WS> OR [|] OR [)]");
            case 10:
                if(ch=='?' || ch=='+' || ch=='*'){
                    return 11;
                }
                return -1;
            case 11:
                return -1;
            case 13:
                if(NAME_START(ch)){
                    push(RULE_NAME_CARDINALITY, 14, 0);
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 13;
                }
                if(ch=='('){
                    push(RULE_CHILDREN, 14, 0);
                    return 1;
                }
                expected(ch, "<NAME_START> OR <WS> OR [(]");
            case 14:
                if(WS(ch)){
                    return 14;
                }
                if(ch==','){
                    return 13;
                }
                if(ch==')'){
                    return 10;
                }
                expected(ch, "<WS> OR [,] OR [)]");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_NAME_CARDINALITY = 56;
    private int name_cardinality(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(NAME_START(ch)){
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                expected(ch, "<NAME_START>");
            case 1:
                if(ch=='?' || ch=='*' || ch=='+'){
                    return 2;
                }
                return -1;
            case 2:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_DECL_SEP = 57;
    private int decl_sep(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='%'){
                    push(RULE_PE_REFERENCE, 1, 0);
                    return 1;
                }
                if(WS(ch)){
                    return 2;
                }
                expected(ch, "[%] OR <WS>");
            case 1:
                return -1;
            case 2:
                if(WS(ch)){
                    return 2;
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_MARKUP_DECL = 58;
    private int markup_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='?'){
                            push(RULE_PI, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 0;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='A'){
                                push(RULE_ATT_LIST_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='N'){
                                push(RULE_NOTATION_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                push(RULE_COMMENT, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<4)
                    return 0;
                if(lookAhead.length()==4){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(lookAhead.charAt(2)=='E'){
                                if(ch=='L'){
                                    push(RULE_ELEMENT_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                                if(ch=='N'){
                                    push(RULE_ENTITY_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                            }
                        }
                    }
                }
                expected(ch, "[<][?] OR [<][!][A] OR [<][!][N] OR [<][!][\\-] OR [<][!][E][L] OR [<][!][E][N]");
            case 1:
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ELEMENT_DECL = 59;
    private int element_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='!'){
                    return 2;
                }
                expected(ch, "[!]");
            case 2:
                if(ch=='E'){
                    return 3;
                }
                expected(ch, "[E]");
            case 3:
                if(ch=='L'){
                    return 4;
                }
                expected(ch, "[L]");
            case 4:
                if(ch=='E'){
                    return 5;
                }
                expected(ch, "[E]");
            case 5:
                if(ch=='M'){
                    return 6;
                }
                expected(ch, "[M]");
            case 6:
                if(ch=='E'){
                    return 7;
                }
                expected(ch, "[E]");
            case 7:
                if(ch=='N'){
                    return 8;
                }
                expected(ch, "[N]");
            case 8:
                if(ch=='T'){
                    return 9;
                }
                expected(ch, "[T]");
            case 9:
                if(WS(ch)){
                    return 10;
                }
                expected(ch, "<WS>");
            case 10:
                if(WS(ch)){
                    return 10;
                }
                if(NAME_START(ch)){
                    buffer.push();
                    push(RULE_NAME, 12, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_START>");
            case 12:
                if(WS(ch)){
                    handler.dtdElement(buffer.pop(0, 0));
                    return 13;
                }
                expected(ch, "<WS>");
            case 13:
                if(ch=='('){
                    return 15;
                }
                if(ch=='E'){
                    return 21;
                }
                if(ch=='A'){
                    return 25;
                }
                if(WS(ch)){
                    return 13;
                }
                expected(ch, "[(] OR [E] OR [A] OR <WS>");
            case 15:
                if(WS(ch)){
                    return 15;
                }
                if(ch=='('){
                    push(RULE_CHILDREN, 16, 2);
                    push(RULE_CHILDREN, 3, 0);
                    return 1;
                }
                if(NAME_START(ch)){
                    push(RULE_CHILDREN, 16, 2);
                    push(RULE_NAME_CARDINALITY, 3, 0);
                    push(RULE_NAME, 1, 0);
                    return 1;
                }
                if(ch=='#'){
                    push(RULE_MIXED, 16, 2);
                    return 3;
                }
                expected(ch, "<WS> OR [(] OR <NAME_START> OR [\\#]");
            case 16:
                if(ch=='>'){
                    return 20;
                }
                if(WS(ch)){
                    return 19;
                }
                expected(ch, "[>] OR <WS>");
            case 19:
                if(ch=='>'){
                    return 20;
                }
                if(WS(ch)){
                    return 19;
                }
                expected(ch, "[>] OR <WS>");
            case 20:
                return -1;
            case 21:
                if(ch=='M'){
                    return 22;
                }
                expected(ch, "[M]");
            case 22:
                if(ch=='P'){
                    return 23;
                }
                expected(ch, "[P]");
            case 23:
                if(ch=='T'){
                    return 24;
                }
                expected(ch, "[T]");
            case 24:
                if(ch=='Y'){
                    return 19;
                }
                expected(ch, "[Y]");
            case 25:
                if(ch=='N'){
                    return 26;
                }
                expected(ch, "[N]");
            case 26:
                if(ch=='Y'){
                    return 27;
                }
                expected(ch, "[Y]");
            case 27:
                if(ch=='>'){
                    return 20;
                }
                if(WS(ch)){
                    return 19;
                }
                expected(ch, "[>] OR <WS>");
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_INT_SUBSET = 60;
    private int int_subset(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ch=='%'){
                        push(RULE_DECL_SEP, 1, 0);
                        push(RULE_PE_REFERENCE, 1, 0);
                        consumed();
                        return 1;
                    }
                    if(WS(ch)){
                        push(RULE_DECL_SEP, 1, 0);
                        consumed();
                        return 2;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='?'){
                            push(RULE_MARKUP_DECL, 1, 0);
                            push(RULE_PI, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 0;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='A'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_ATT_LIST_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='N'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_NOTATION_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_COMMENT, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<4)
                    return 0;
                if(lookAhead.length()==4){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(lookAhead.charAt(2)=='E'){
                                if(ch=='L'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ELEMENT_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                                if(ch=='N'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ENTITY_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                            }
                        }
                    }
                }
                expected(ch, "[%] OR <WS> OR [<][?] OR [<][!][A] OR [<][!][N] OR [<][!][\\-] OR [<][!][E][L] OR [<][!][E][N]");
            case 1:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 1;
                if(lookAhead.length()==1){
                    if(ch=='%'){
                        push(RULE_DECL_SEP, 1, 0);
                        push(RULE_PE_REFERENCE, 1, 0);
                        consumed();
                        return 1;
                    }
                    if(WS(ch)){
                        push(RULE_DECL_SEP, 1, 0);
                        consumed();
                        return 2;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 1;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='?'){
                            push(RULE_MARKUP_DECL, 1, 0);
                            push(RULE_PI, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 1;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='A'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_ATT_LIST_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='N'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_NOTATION_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_COMMENT, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<4)
                    return 1;
                if(lookAhead.length()==4){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(lookAhead.charAt(2)=='E'){
                                if(ch=='L'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ELEMENT_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                                if(ch=='N'){
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ENTITY_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                            }
                        }
                    }
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_DOCTYPE_DECL = 61;
    private int doctype_decl(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                if(ch=='<'){
                    return 1;
                }
                expected(ch, "[<]");
            case 1:
                if(ch=='!'){
                    return 2;
                }
                expected(ch, "[!]");
            case 2:
                if(ch=='D'){
                    return 3;
                }
                expected(ch, "[D]");
            case 3:
                if(ch=='O'){
                    return 4;
                }
                expected(ch, "[O]");
            case 4:
                if(ch=='C'){
                    return 5;
                }
                expected(ch, "[C]");
            case 5:
                if(ch=='T'){
                    return 6;
                }
                expected(ch, "[T]");
            case 6:
                if(ch=='Y'){
                    return 7;
                }
                expected(ch, "[Y]");
            case 7:
                if(ch=='P'){
                    return 8;
                }
                expected(ch, "[P]");
            case 8:
                if(ch=='E'){
                    return 9;
                }
                expected(ch, "[E]");
            case 9:
                if(WS(ch)){
                    return 10;
                }
                expected(ch, "<WS>");
            case 10:
                if(WS(ch)){
                    return 10;
                }
                if(NAME_START(ch)){
                    buffer.push();
                    push(RULE_NAME, 12, 0);
                    return 1;
                }
                expected(ch, "<WS> OR <NAME_START>");
            case 12:
                if(WS(ch)){
                    handler.dtdRoot(buffer.pop(0, 0));
                    return 13;
                }
                if(ch=='['){
                    handler.dtdRoot(buffer.pop(0, 0));
                    handler.dtdStart();
                    return 17;
                }
                if(ch=='>'){
                    handler.dtdRoot(buffer.pop(0, 0));
                    handler.dtdStart();
                    return 21;
                }
                expected(ch, "<WS> OR [\\[] OR [>]");
            case 13:
                if(WS(ch)){
                    return 13;
                }
                if(ch=='P'){
                    push(RULE_EXTERNAL_ID, 14, 0);
                    push(RULE_PUBLIC_ID, 1, 0);
                    return 1;
                }
                if(ch=='S'){
                    push(RULE_EXTERNAL_ID, 14, 0);
                    push(RULE_SYSTEM_ID, 4, 0);
                    return 1;
                }
                if(ch=='['){
                    handler.dtdStart();
                    return 17;
                }
                if(ch=='>'){
                    handler.dtdStart();
                    return 21;
                }
                expected(ch, "<WS> OR [P] OR [S] OR [\\[] OR [>]");
            case 14:
                if(ch=='['){
                    handler.dtdStart();
                    return 17;
                }
                if(ch=='>'){
                    handler.dtdStart();
                    return 21;
                }
                if(WS(ch)){
                    return 14;
                }
                expected(ch, "[\\[] OR [>] OR <WS>");
            case 17:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 17;
                if(lookAhead.length()==1){
                    if(ch=='%'){
                        push(RULE_INT_SUBSET, 18, 0);
                        push(RULE_DECL_SEP, 1, 0);
                        push(RULE_PE_REFERENCE, 1, 0);
                        consumed();
                        return 1;
                    }
                    if(WS(ch)){
                        push(RULE_INT_SUBSET, 18, 0);
                        push(RULE_DECL_SEP, 1, 0);
                        consumed();
                        return 2;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 17;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='?'){
                            push(RULE_INT_SUBSET, 18, 0);
                            push(RULE_MARKUP_DECL, 1, 0);
                            push(RULE_PI, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 17;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='A'){
                                push(RULE_INT_SUBSET, 18, 0);
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_ATT_LIST_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='N'){
                                push(RULE_INT_SUBSET, 18, 0);
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_NOTATION_DECL, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                push(RULE_INT_SUBSET, 18, 0);
                                push(RULE_MARKUP_DECL, 1, 0);
                                push(RULE_COMMENT, 1, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<4)
                    return 17;
                if(lookAhead.length()==4){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(lookAhead.charAt(2)=='E'){
                                if(ch=='L'){
                                    push(RULE_INT_SUBSET, 18, 0);
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ELEMENT_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                                if(ch=='N'){
                                    push(RULE_INT_SUBSET, 18, 0);
                                    push(RULE_MARKUP_DECL, 1, 0);
                                    push(RULE_ENTITY_DECL, 1, 0);
                                    consumed();
                                    consumed();
                                    consumed();
                                    consumed();
                                    return 4;
                                }
                            }
                        }
                    }
                }
                expected(ch, "[%] OR <WS> OR [<][?] OR [<][!][A] OR [<][!][N] OR [<][!][\\-] OR [<][!][E][L] OR [<][!][E][N]");
            case 18:
                if(ch==']'){
                    return 19;
                }
                expected(ch, "[\\]]");
            case 19:
                if(ch=='>'){
                    return 21;
                }
                if(WS(ch)){
                    return 19;
                }
                expected(ch, "[>] OR <WS>");
            case 21:
                handler.dtdEnd();
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_PROLOG = 62;
    private int prolog(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        handler.xdeclEnd();
                        push(RULE_MISC, 2, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 0;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='D'){
                                handler.xdeclEnd();
                                push(RULE_DOCTYPE_DECL, 4, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                handler.xdeclEnd();
                                push(RULE_MISC, 2, 0);
                                push(RULE_COMMENT, 2, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<6)
                    return 0;
                if(lookAhead.length()==6){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='?'){
                            if(lookAhead.charAt(2)=='x'){
                                if(lookAhead.charAt(3)=='m'){
                                    if(lookAhead.charAt(4)=='l'){
                                        if(WS(ch)){
                                            push(RULE_XDECL, 1, 0);
                                            consumed();
                                            consumed();
                                            consumed();
                                            consumed();
                                            consumed();
                                            consumed();
                                            return 6;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(lookAhead.charAt(0)=='<'){
                    handler.xdeclEnd();
                    push(RULE_MISC, 2, 0);
                    push(RULE_PI, 2, 0);
                    consumed();
                    lookAhead.reset();
                    return 1;
                }
                handler.xdeclEnd();
                return -1;
            case 1:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 1;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        handler.xdeclEnd();
                        push(RULE_MISC, 2, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 1;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='?'){
                            handler.xdeclEnd();
                            push(RULE_MISC, 2, 0);
                            push(RULE_PI, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 1;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='D'){
                                handler.xdeclEnd();
                                push(RULE_DOCTYPE_DECL, 4, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                handler.xdeclEnd();
                                push(RULE_MISC, 2, 0);
                                push(RULE_COMMENT, 2, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                handler.xdeclEnd();
                return -1;
            case 2:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 2;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        push(RULE_MISC, 2, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 2;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='?'){
                            push(RULE_MISC, 2, 0);
                            push(RULE_PI, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 2;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='D'){
                                push(RULE_DOCTYPE_DECL, 4, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                push(RULE_MISC, 2, 0);
                                push(RULE_COMMENT, 2, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                return -1;
            case 4:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 4;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        push(RULE_MISC, 4, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 4;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='!'){
                            push(RULE_MISC, 4, 0);
                            push(RULE_COMMENT, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(ch=='?'){
                            push(RULE_MISC, 4, 0);
                            push(RULE_PI, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_DOCUMENT = 63;
    private int document(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        push(RULE_PROLOG, 1, 0);
                        handler.xdeclEnd();
                        push(RULE_MISC, 2, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(NCNAME_START(ch)){
                            push(RULE_PROLOG, 1, 0);
                            handler.xdeclEnd();
                            pop();
                            push(RULE_ELEM, 2, 0);
                            push(RULE_ELEM_ATTRS, 1, 0);
                            consumed();
                            push(RULE_QNAME, 2, 0);
                            buffer.push();
                            buffer.push();
                            push(RULE_NCNAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 0;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='D'){
                                push(RULE_PROLOG, 1, 0);
                                handler.xdeclEnd();
                                push(RULE_DOCTYPE_DECL, 4, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='-'){
                                push(RULE_PROLOG, 1, 0);
                                handler.xdeclEnd();
                                push(RULE_MISC, 2, 0);
                                push(RULE_COMMENT, 2, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<6)
                    return 0;
                if(lookAhead.length()==6){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='?'){
                            if(lookAhead.charAt(2)=='x'){
                                if(lookAhead.charAt(3)=='m'){
                                    if(lookAhead.charAt(4)=='l'){
                                        if(WS(ch)){
                                            push(RULE_PROLOG, 1, 0);
                                            push(RULE_XDECL, 1, 0);
                                            consumed();
                                            consumed();
                                            consumed();
                                            consumed();
                                            consumed();
                                            consumed();
                                            return 6;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(lookAhead.charAt(0)=='<'){
                    push(RULE_PROLOG, 1, 0);
                    handler.xdeclEnd();
                    push(RULE_MISC, 2, 0);
                    push(RULE_PI, 2, 0);
                    consumed();
                    lookAhead.reset();
                    return 1;
                }
                expected(ch, "<WS> OR [<]<NCNAME_START> OR [<][!][D] OR [<][!][\\-] OR [<][?][x][m][l]<WS> OR [<]");
            case 1:
                if(ch=='<'){
                    push(RULE_ELEM, 2, 0);
                    push(RULE_ELEM_ATTRS, 1, 0);
                    return 1;
                }
                expected(ch, "[<]");
            case 2:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 2;
                if(lookAhead.length()==1){
                    if(WS(ch)){
                        push(RULE_MISC, 2, 0);
                        consumed();
                        return 1;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 2;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='<'){
                        if(ch=='!'){
                            push(RULE_MISC, 2, 0);
                            push(RULE_COMMENT, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(ch=='?'){
                            push(RULE_MISC, 2, 0);
                            push(RULE_PI, 2, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    public static final int RULE_ELEM_ENTITY = 64;
    private int elem_entity(int ch) throws Exception{
        switch(stateStack.peek()){
            case 0:
                lookAhead.add(ch);
                if(ch!=-1 && lookAhead.length()<1)
                    return 0;
                if(lookAhead.length()==1){
                    if(ch==']'){
                        push(RULE_ELEM_CONTENT, 0, 0);
                        buffer.push();
                        consumed();
                        return 8;
                    }
                    if(ELEM_CONTENT_CHAR(ch)){
                        push(RULE_ELEM_CONTENT, 0, 0);
                        buffer.push();
                        consumed();
                        return 6;
                    }
                }
                if(ch!=-1 && lookAhead.length()<2)
                    return 0;
                if(lookAhead.length()==2){
                    if(lookAhead.charAt(0)=='&'){
                        if(ch=='#'){
                            push(RULE_ELEM_CONTENT, 0, 0);
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_CHAR_REF, 1, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                        if(NAME_START(ch)){
                            push(RULE_ELEM_CONTENT, 0, 0);
                            push(RULE_REFERENCE, 13, 0);
                            push(RULE_ENTITY_REF, 1, 0);
                            consumed();
                            buffer.push();
                            push(RULE_NAME, 2, 0);
                            consumed();
                            return 1;
                        }
                    }
                    if(lookAhead.charAt(0)=='<'){
                        if(NCNAME_START(ch)){
                            push(RULE_ELEM_CONTENT, 0, 0);
                            push(RULE_ELEM, 15, 0);
                            push(RULE_ELEM_ATTRS, 1, 0);
                            consumed();
                            push(RULE_QNAME, 2, 0);
                            buffer.push();
                            buffer.push();
                            push(RULE_NCNAME, 2, 0);
                            consumed();
                            return 1;
                        }
                        if(ch=='?'){
                            push(RULE_ELEM_CONTENT, 0, 0);
                            push(RULE_PI, 15, 0);
                            consumed();
                            consumed();
                            return 2;
                        }
                    }
                }
                if(ch!=-1 && lookAhead.length()<3)
                    return 0;
                if(lookAhead.length()==3){
                    if(lookAhead.charAt(0)=='<'){
                        if(lookAhead.charAt(1)=='!'){
                            if(ch=='-'){
                                push(RULE_ELEM_CONTENT, 0, 0);
                                push(RULE_COMMENT, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                            if(ch=='['){
                                push(RULE_ELEM_CONTENT, 0, 0);
                                push(RULE_CDATA, 17, 0);
                                consumed();
                                consumed();
                                consumed();
                                return 3;
                            }
                        }
                    }
                }
                return -1;
            default:
                throw new Error("impossible");
        }
    }

    @Override
    protected int callRule(int ch) throws Exception{
        switch(ruleStack.peek()){
            case 0:
                return eq(ch);
            case 1:
                return yes_no(ch);
            case 2:
                return sd_decl(ch);
            case 3:
                return enc_name(ch);
            case 4:
                return enc_decl(ch);
            case 5:
                return version_num(ch);
            case 6:
                return version_info(ch);
            case 7:
                return comment(ch);
            case 8:
                return cdata_end(ch);
            case 9:
                return cdata(ch);
            case 10:
                return name(ch);
            case 11:
                return pi_target(ch);
            case 12:
                return pi(ch);
            case 13:
                return ncname(ch);
            case 14:
                return qname(ch);
            case 15:
                return char_ref(ch);
            case 16:
                return entity_ref(ch);
            case 17:
                return reference(ch);
            case 18:
                return attr(ch);
            case 19:
                return value(ch);
            case 20:
                return dq_value(ch);
            case 21:
                return q_value(ch);
            case 22:
                return elem_attrs(ch);
            case 23:
                return elem_end(ch);
            case 24:
                return elem_content(ch);
            case 25:
                return elem(ch);
            case 26:
                return xdecl(ch);
            case 27:
                return misc(ch);
            case 28:
                return sytem_literal(ch);
            case 29:
                return pubid_literal(ch);
            case 30:
                return system_id(ch);
            case 31:
                return public_id(ch);
            case 32:
                return notation_decl(ch);
            case 33:
                return external_id(ch);
            case 34:
                return pe_reference(ch);
            case 35:
                return ndata_decl(ch);
            case 36:
                return pe_def(ch);
            case 37:
                return entity_value(ch);
            case 38:
                return q_entity_value(ch);
            case 39:
                return dq_entity_value(ch);
            case 40:
                return entity_decl(ch);
            case 41:
                return entity_def(ch);
            case 42:
                return string_type(ch);
            case 43:
                return tokenized_type(ch);
            case 44:
                return nmtoken(ch);
            case 45:
                return nmtokens(ch);
            case 46:
                return names(ch);
            case 47:
                return enumeration(ch);
            case 48:
                return mixed(ch);
            case 49:
                return notation_type(ch);
            case 50:
                return enumerated_type(ch);
            case 51:
                return att_type(ch);
            case 52:
                return default_decl(ch);
            case 53:
                return att_def(ch);
            case 54:
                return att_list_decl(ch);
            case 55:
                return children(ch);
            case 56:
                return name_cardinality(ch);
            case 57:
                return decl_sep(ch);
            case 58:
                return markup_decl(ch);
            case 59:
                return element_decl(ch);
            case 60:
                return int_subset(ch);
            case 61:
                return doctype_decl(ch);
            case 62:
                return prolog(ch);
            case 63:
                return document(ch);
            case 64:
                return elem_entity(ch);
            default:
                throw new Error("impossible");
        }
    }

    @Override
    public void onSuccessful() throws Exception{
        handler.onSuccessful();
    }

    @Override
    public void fatalError(String message) throws Exception{
        handler.fatalError(message);
    }

    private final jlibs.xml.sax.async.AsyncXMLReader handler;
    public XMLScanner(jlibs.xml.sax.async.AsyncXMLReader handler){
        super(6);
        this.handler = handler;
    }
}
